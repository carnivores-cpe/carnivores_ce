<?xml version="1.0"?>
<doc>
    <assembly>
        "V_SOFT"
    </assembly>
    <members>
        <member name="M:ProcessAdvancedHealthSystem(_TCharacter*,System.Int32)">
Processes advanced health system and affects the hunter.
This function assumes the character is in damage range.
It simply applies the damage/healing.

</member>
        <member name="M:LocalHumanMatchModel(_TCharacter*)">
Match the passed model with the human player's movement and actions
This should be a multiplayer testing function.
@author adelphospro
@date 11.19.2009

</member>
        <member name="M:irrklang.createAudioRecorderDeviceList(irrklang.E_SOUND_OUTPUT_DRIVER,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
The device IDs in this list can be used as parameter to createIrrKlangAudioRecorder() to
	make irrKlang use a special recording device. 
	\param driver The sound output driver of which the list is generated. Set it irrklang::ESOD_AUTO_DETECT
	to let this function use the same device as createIrrKlangDevice() would choose.
	\param sdk_version_do_not_use Don't use or change this parameter. Always set it to
	IRRKLANG_SDK_VERSION, which is done by default. This is needed for sdk version checks.
	\return Returns a pointer to the list of enumerated recording devices for the selected sound driver.
	The device IDs in this list can be used as parameter to createIrrKlangAudioRecorder() to
	make irrKlang use a special sound device. 
	After you don't need the list anymore, call ISoundDeviceList::drop() in order to free its memory. 
</member>
        <member name="M:irrklang.createIrrKlangAudioRecorder(irrklang.ISoundEngine*,irrklang.E_SOUND_OUTPUT_DRIVER,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
If you want to play back recorded audio as well, create the ISoundEngine first using
	createIrrKlangDevice() and then the IAudioRecorder using createIrrKlangAudioRecorder(), where
	you set the ISoundEngine as first parameter. See @ref recordingAudio for an example on how to use this.
	Note: audio recording is a very new feature a still beta in irrKlang. It currently only works in Windows
	and with DirectSound (subject to change).
	\param irrKlangDeviceForPlayback A pointer to the already existing sound device used for playback
	of audio. Sound sources recorded with the IAudioRecorder will be added into that device so that
	they can be played back there.
	\param driver The sound output driver to be used for recording audio. Use irrklang::ESOD_AUTO_DETECT
	to let irrKlang decide which driver will be best.
	\param deviceID Some additional optional deviceID for the audio driver. If not needed, simple
	set this to 0. Use createAudioRecorderDeviceList() to get a list of all deviceIDs.
	\param sdk_version_do_not_use Don't use or change this parameter. Always set it to
	IRRKLANG_SDK_VERSION, which is done by default. This is needed for sdk version checks.
	\return Returns pointer to the created irrKlang device or null if the
	device could not be created. If you don't need the device, use ISoundEngine::drop() to
	delete it. See IRefCounted::drop() for details.

</member>
        <member name="M:irrklang.createSoundDeviceList(irrklang.E_SOUND_OUTPUT_DRIVER,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
The device IDs in this list can be used as parameter to createIrrKlangDevice() to
	make irrKlang use a special sound device. See @ref enumeratingDevices for an example on how
	to use this.
	\param driver The sound output driver of which the list is generated. Set it irrklang::ESOD_AUTO_DETECT
	to let this function use the same device as createIrrKlangDevice() would choose.
	\param sdk_version_do_not_use Don't use or change this parameter. Always set it to
	IRRKLANG_SDK_VERSION, which is done by default. This is needed for sdk version checks.
	\return Returns a pointer to the list of enumerated sound devices for the selected sound driver.
	The device IDs in this list can be used as parameter to createIrrKlangDevice() to
	make irrKlang use a special sound device. 
	After you don't need the list anymore, call ISoundDeviceList::drop() in order to free its memory. 
</member>
        <member name="M:irrklang.createIrrKlangDevice(irrklang.E_SOUND_OUTPUT_DRIVER,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\param driver The sound output driver to be used for sound output. Use irrklang::ESOD_AUTO_DETECT
	to let irrKlang decide which driver will be best.
	\param options A combination of irrklang::E_SOUND_ENGINE_OPTIONS literals. Default value is 
	irrklang::ESEO_DEFAULT_OPTIONS.
	\param deviceID Some additional optional deviceID for the audio driver. If not needed, simple
	set this to 0. 
	This can be used for example to set a specific ALSA output pcm device for output
	("default" or "hw", for example). For most driver types, available deviceIDs can be 
	enumerated using createSoundDeviceList().
	See @ref enumeratingDevices for an example or ISoundDeviceList or details.
	\param sdk_version_do_not_use Don't use or change this parameter. Always set it to
	IRRKLANG_SDK_VERSION, which is done by default. This is needed for sdk version checks.
	\return Returns pointer to the created irrKlang device or null if the
	device could not be created. If you don't need the device, use ISoundEngine::drop() to
	delete it. See IRefCounted::drop() for details.

</member>
        <member name="M:irrklang.ICapturedAudioDataReceiver.OnReceiveAudioDataStreamChunk(System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
See IAudioRecorder::startRecordingCustomHandledAudio for details.
		\param audioData: Pointer to a part of the recorded audio data
		\param lengthInBytes: Amount of bytes in the audioData buffer.
</member>
        <member name="T:irrklang.ICapturedAudioDataReceiver">
Is used as parameter in IAudioRecorder::startRecordingCustomHandledAudio. 
</member>
        <member name="M:irrklang.IAudioRecorder.getDriverName">
Possible returned strings are "NULL", "ALSA", "CoreAudio", "winMM", 
		"DirectSound" and "DirectSound8". 
</member>
        <member name="M:irrklang.IAudioRecorder.getRecordedAudioData">
This method will only succeed if audio recording is currently stopped and
		something was recorded previously using startRecordingBufferedAudio(). 
		The lenght of the buffer can be retrieved using 
		getAudioFormat().getSampleDataSize(). Note that the pointer is only valid
		as long as not clearRecordedAudioDataBuffer() is called or another sample is
		recorded.
</member>
        <member name="M:irrklang.IAudioRecorder.getAudioFormat">
Also contains informations about the length of the recorded audio stream. 
</member>
        <member name="M:irrklang.IAudioRecorder.clearRecordedAudioDataBuffer">
This method will only succeed if audio recording is currently stopped. 
</member>
        <member name="M:irrklang.IAudioRecorder.addSoundSourceFromRecordedAudio(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
The returned sound source pointer then can be used to play back the recorded audio data
		using ISoundEngine::play2D(). This method only will succeed if the audio was recorded using
		startRecordingBufferedAudio() and audio recording is currently stopped.
		\param soundName Name of the virtual sound file (e.g. "someRecordedAudio"). You can also use this
		name when calling play3D() or play2D().  
</member>
        <member name="M:irrklang.IAudioRecorder.startRecordingCustomHandledAudio(irrklang.ICapturedAudioDataReceiver*,System.Int32,irrklang.ESampleFormat,System.Int32)">
Clears all possibly previously recorded buffered audio data and starts to record 
		audio data, which is delivered to a custom user callback interface. 
		When finished recording audio data, call stopRecordingAudio(). If instead of 
		recording the data to the receiver interface recording into a managed buffer
		is wished, use startRecordingBufferedAudio() instead.
		\param receiver: Interface to be implemented by the user, gets called once for each
		captured audio data chunk. 
		\param sampleRate: Sample rate of the recorded audio.
		\param sampleFormat: Sample format of the recorded audio.
		\param channelCount: Amount of audio channels.
		\return Returns true if successfully started recording and false if not. 
</member>
        <member name="M:irrklang.IAudioRecorder.startRecordingBufferedAudio(System.Int32,irrklang.ESampleFormat,System.Int32)">
Clears all possibly previously recorded buffered audio data and starts to record. 
		When finished recording audio data, call stopRecordingAudio(). 
		All recorded audio data gets stored into an internal audio buffer, which
		can then be accessed for example using addSoundSourceFromRecordedAudio() or
		getRecordedAudioData(). For recording audio data not into an internal audio
		buffer, use startRecordingCustomHandledAudio().
		\param sampleRate: Sample rate of the recorded audio.
		\param sampleFormat: Sample format of the recorded audio.
		\param channelCount: Amount of audio channels.
		\return Returns true if successfully started recording and false if not.
</member>
        <member name="T:irrklang.IAudioRecorder">
It creates sound sources into an ISoundEngine which then can be played there. 
	See @ref recordingAudio for an example on how to use this. 
</member>
        <member name="M:irrklang.ISoundDeviceList.getDeviceDescription(System.Int32)">
\param index Index of the device, a value between 0 and ISoundDeviceList::getDeviceCount()-1. 
</member>
        <member name="M:irrklang.ISoundDeviceList.getDeviceID(System.Int32)">
\param index Index of the device, a value between 0 and ISoundDeviceList::getDeviceCount()-1. 
	\return Returns a pointer to a string identifying the device. The string will only as long valid 
	as long as the ISoundDeviceList exists. 
</member>
        <member name="T:irrklang.ISoundDeviceList">
The function createIrrKlangDevice() has a parameter 'deviceID' which takes the value returned by
ISoundDeviceList::getDeviceID() and uses that device then. 
The list of devices in ISoundDeviceList usually also includes the default device which is the first
entry and has an empty deviceID string ("") and the description "default device". 
There is some example code on how to use the ISoundDeviceList in @ref enumeratingDevices.
</member>
        <member name="M:irrklang.ISoundStopEventReceiver.OnSoundStopped(irrklang.ISound*,irrklang.E_STOP_EVENT_CAUSE,System.Void*)">
This is the only method to be implemented by the user.
	The sound stop event is guaranteed to be called when a sound or sound stream is finished,
	either because the sound reached its playback end, its sound source was removed,
	ISoundEngine::stopAllSounds() has been called or the whole engine was deleted.
	Please note: Sound events will occur in a different thread when the engine runs in
	multi threaded mode (default). In single threaded mode, the event will happen while
	the user thread is calling ISoundEngine::update().
	\param sound: Sound which has been stopped. 
	\param reason: The reason why the sound stop event was fired. Usually, this will be ESEC_SOUND_FINISHED_PLAYING.
	When the sound was aborded by calling ISound::stop() or ISoundEngine::stopAllSounds();, this would be 
	ESEC_SOUND_STOPPED_BY_USER. If irrKlang was deleted or the sound source was removed, the value is 
	ESEC_SOUND_STOPPED_BY_SOURCE_REMOVAL.
	\param userData: userData pointer set by the user when registering the interface
	via ISound::setSoundStopEventReceiver(). 
</member>
        <member name="T:irrklang.ISoundStopEventReceiver">
The interface has only one method to be implemented by the user: OnSoundStopped().
Implement this interface and set it via ISound::setSoundStopEventReceiver().
The sound stop event is guaranteed to be called when a sound or sound stream is finished,
either because the sound reached its playback end, its sound source was removed,
ISoundEngine::stopAllSounds() has been called or the whole engine was deleted. 
</member>
        <member name="M:irrklang.IAudioStreamLoader.createAudioStream(irrklang.IFileReader*)">
\return Pointer to the created audio stream. Returns 0 if loading failed.
	If you no longer need the stream, you should call IAudioFileStream::drop().
	See IRefCounted::drop() for more information. 
</member>
        <member name="M:irrklang.IAudioStreamLoader.isALoadableFileExtension(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
This decision should be based only on the file extension (e.g. ".wav"). The given
	filename string is guaranteed to be lower case. 
</member>
        <member name="M:irrklang.IAudioStream.readFrames(System.Void*,System.Int32)">
\param target: Target data buffer to the method will write the read frames into. The
	specified buffer will be at least getFormat().getFrameSize()*frameCountToRead bytes big.
	\param frameCountToRead: amount of frames to be read.
	\returns Returns amount of frames really read. Should be frameCountToRead in most cases. 
</member>
        <member name="M:irrklang.IAudioStream.setPosition(System.Int32)">
For example to let the stream be read from the beginning of the file again, 
	setPosition(0) would be called. This is usually done be the sound engine to
	loop a stream after if has reached the end. Return true if sucessful and 0 if not. 
	\param pos: Position in frames.
</member>
        <member name="T:irrklang.SInternalAudioInterface">
Use ISoundEngine::getInternalAudioInterface() to get this. 
</member>
        <member name="M:irrklang.ISoundEngine.getInternalAudioInterface">
Use this with caution. This is only exposed to make it possible for other libraries
		such as Video playback packages to extend or use the sound driver irrklang uses. 
</member>
        <member name="M:irrklang.ISoundEngine.loadPlugins(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Plugins usually are .dll, .so or .dylib
		files named for example ikpMP3.dll (= short for irrKlangPluginMP3) which
		make it possible to play back mp3 files. Plugins are being 
		loaded from the current working directory at startup of the sound engine
		if the parameter ESEO_LOAD_PLUGINS is set (which it is by default), but
		using this method, it is possible to load plugins from a custom path in addition. 
		\param path Path to the plugin directory, like "C:\games\somegamegame\irrklangplugins".
		\return returns true if sucessful or fals if not, for example because the path could 
		not be found. 
</member>
        <member name="M:irrklang.ISoundEngine.setDopplerEffectParameters(System.Single,System.Single)">
\param dopplerFactor is a value between 0 and 10 which multiplies the doppler 
		effect. Default value is 1.0, which is the real world doppler effect, and 10.0f 
		would be ten times the real world doppler effect.
		\param distanceFactor is the number of meters in a vector unit. The default value
		is 1.0. Doppler effects are calculated in meters per second, with this parameter,
		this can be changed, all velocities and positions are influenced by this. If
		the measurement should be in foot instead of meters, set this value to 0.3048f
		for example.
</member>
        <member name="M:irrklang.ISoundEngine.setRolloffFactor(System.Single)">
The rolloff factor can range from 0.0 to 10.0, where 0 is no rolloff. 1.0 is the default 
		rolloff factor set, the value which we also experience in the real world. A value of 2 would mean
		twice the real-world rolloff. 
</member>
        <member name="M:irrklang.ISoundEngine.getDefault3DSoundMaxDistance">
 This value influences how loud a sound is heard based on its distance.
		You can change it using setDefault3DSoundmaxDistance(), but 
		changing this value is usually not necessary. This value causes the sound
		to stop attenuating after it reaches the max distance. Most people think that this sets the
		volume of the sound to 0 after this distance, but this is not true. Only change the
		minimal distance (using for example setDefault3DSoundMinDistance()) to influence this.
		See ISound::setMaxDistance() for details about what the max distance is.
		It is also possible to influence this default value for every sound file 
		using ISoundSource::setDefaultMaxDistance().
		\return Default maximal distance for 3d sounds. The default value is 1000000000.0f. 
</member>
        <member name="M:irrklang.ISoundEngine.setDefault3DSoundMaxDistance(System.Single)">
Changing this value is usually not necessary. Use setDefault3DSoundMinDistance() instead.
		Don't change this value if you don't know what you are doing: This value causes the sound
		to stop attenuating after it reaches the max distance. Most people think that this sets the
		volume of the sound to 0 after this distance, but this is not true. Only change the
		minimal distance (using for example setDefault3DSoundMinDistance()) to influence this.
		See ISound::setMaxDistance() for details about what the max distance is.
		It is also possible to influence this default value for every sound file 
		using ISoundSource::setDefaultMaxDistance().
		This method only influences the initial distance value of sounds. For changing the
		distance after the sound has been started to play, use ISound::setMinDistance() and ISound::setMaxDistance().
		\param maxDistance Default maximal distance for 3d sounds. The default value is 1000000000.0f. 
</member>
        <member name="M:irrklang.ISoundEngine.getDefault3DSoundMinDistance">
 This value influences how loud a sound is heard based on its distance.
		You can change it using setDefault3DSoundMinDistance().
		See ISound::setMinDistance() for details about what the min distance is.
		It is also possible to influence this default value for every sound file 
		using ISoundSource::setDefaultMinDistance().
		\return Default minimal distance for 3d sounds. The default value is 1.0f. 
</member>
        <member name="M:irrklang.ISoundEngine.setDefault3DSoundMinDistance(System.Single)">
 This value influences how loud a sound is heard based on its distance.
		See ISound::setMinDistance() for details about what the min distance is.
		It is also possible to influence this default value for every sound file 
		using ISoundSource::setDefaultMinDistance().
		This method only influences the initial distance value of sounds. For changing the
		distance after the sound has been started to play, use ISound::setMinDistance() and ISound::setMaxDistance().
		\param minDistance Default minimal distance for 3d sounds. The default value is 1.0f.
</member>
        <member name="M:irrklang.ISoundEngine.addFileFactory(irrklang.IFileFactory*)">
Derive your own class from IFileFactory, overwrite the createFileReader()
		method and return your own implemented IFileReader to overwrite file access of irrKlang. 
</member>
        <member name="M:irrklang.ISoundEngine.isMultiThreaded">
This basicly returns the flag set by the user when creating the sound engine.
</member>
        <member name="M:irrklang.ISoundEngine.registerAudioStreamLoader(irrklang.IAudioStreamLoader*)">
Use this to enhance the audio engine to support other or new file formats.
		To do this, implement your own IAudioStreamLoader interface and register it
		with this method 
</member>
        <member name="M:irrklang.ISoundEngine.update">
This updates the 3d positions of the sounds as well as their volumes, effects,
		streams and other stuff. Call this several times per frame (the more the better) if you
		specified irrKlang to run single threaded. Otherwise it is not necessary to use this method.
		This method is being called by the scene manager automaticly if you are using one, so
		you might want to ignore this. 
</member>
        <member name="M:irrklang.ISoundEngine.setListenerPosition(irrklang.vec3d&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,irrklang.vec3d&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,irrklang.vec3d&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,irrklang.vec3d&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
When playing sounds in 3D, updating the position of the listener every frame should be
		done using this function.
		\param pos Position of the camera or listener.
		\param lookdir Direction vector where the camera or listener is looking into. If you have a 
		camera position and a target 3d point where it is looking at, this would be cam-&gt;getTarget() - cam-&gt;getAbsolutePosition().
		\param velPerSecond The velocity per second describes the speed of the listener and 
		is only needed for doppler effects.
		\param upvector Vector pointing 'up', so the engine can decide where is left and right. 
		This vector is usually (0,1,0).
</member>
        <member name="M:irrklang.ISoundEngine.setSoundVolume(System.Single)">
\param volume 0 (silent) to 1.0f (full volume) 
</member>
        <member name="M:irrklang.ISoundEngine.removeAllSoundSources">
This will also cause all sounds to be stopped. 
		Removing sound sources is only necessary if you know you won't use a lot of non-streamed
		sounds again. Sound sources of streamed sounds do not cost a lot of memory. 
</member>
        <member name="M:irrklang.ISoundEngine.removeSoundSource(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
This will also cause all currently playing sounds of this source to be stopped. 
		Also note that if the source has been removed successfully, the value returned 
		by getSoundSourceCount() will have been decreased by one. 
		Removing sound sources is only necessary if you know you won't use a lot of non-streamed
		sounds again. Sound sources of streamed sounds do not cost a lot of memory. 
</member>
        <member name="M:irrklang.ISoundEngine.removeSoundSource(irrklang.ISoundSource*)">
This will also cause all currently playing sounds of this source to be stopped. 
		Also note that if the source has been removed successfully, the value returned 
		by getSoundSourceCount() will have been decreased by one. 
		Removing sound sources is only necessary if you know you won't use a lot of non-streamed
		sounds again. Sound sources of streamed sounds do not cost a lot of memory.
</member>
        <member name="M:irrklang.ISoundEngine.addSoundSourceAlias(irrklang.ISoundSource*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
This is useful if you want to play multiple sounds but each sound isn't necessarily one single file.
		Also useful if you want to or play the same sound using different names, volumes or min and max 3D distances.
		\param baseSource The sound source where this sound source should be based on. This sound
		source will use the baseSource as base to access the file and similar, but it will have its
		own name and its own default settings.
		\param soundName Name of the new sound source to be added.
		\return Returns the pointer to the added sound source or 0 if not sucessful because for
		example a sound already existed with that name. If not successful, the reason will be printed
		into the log.
</member>
        <member name="M:irrklang.ISoundEngine.addSoundSourceFromPCMData(System.Void*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,irrklang.SAudioStreamFormat,System.Boolean)">
\param memory Pointer to the memory to be treated as loaded sound file.
		\param sizeInBytes Size of the memory chunk, in bytes. 
		\param soundName Name of the virtual sound file (e.g. "sounds/something.mp3"). You can also use this
		name when calling play3D() or play2D(). 
		\param copyMemory If set to true which is default, the memory block is copied 
		and stored in the engine, after	calling addSoundSourceFromPCMData() the memory pointer can be deleted
		savely. If set to true, the memory is not copied and the user takes the responsibility that 
		the memory block pointed to remains there as long as the sound engine or at least this sound
		source exists. 
		\return Returns the pointer to the added sound source or 0 if not sucessful because for
		example a sound already existed with that name. If not successful, the reason will be printed
		into the log. 
</member>
        <member name="M:irrklang.ISoundEngine.addSoundSourceFromMemory(System.Void*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
Note: This method only accepts a file (.wav, .ogg, etc) which is totally loaded into memory.
		If you want to add a sound source from decoded plain PCM data in memory, use addSoundSourceFromPCMData() instead.
		\param memory Pointer to the memory to be treated as loaded sound file.
		\param sizeInBytes Size of the memory chunk, in bytes.
		\param soundName Name of the virtual sound file (e.g. "sounds/something.mp3"). You can also use this
		name when calling play3D() or play2D(). Hint: If you include the extension of the original file
		like .ogg, .mp3 or .wav at the end of the filename, irrKlang will be able to decide better what
		file format it is and might be able to start playback faster.
		\param copyMemory If set to true which is default, the memory block is copied 
		and stored in the engine, after	calling addSoundSourceFromMemory() the memory pointer can be deleted
		savely. If set to false, the memory is not copied and the user takes the responsibility that 
		the memory block pointed to remains there as long as the sound engine or at least this sound
		source exists.
		\return Returns the pointer to the added sound source or 0 if not sucessful because for
		example a sound already existed with that name. If not successful, the reason will be printed
		into the log. 
</member>
        <member name="M:irrklang.ISoundEngine.addSoundSourceFromFile(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,irrklang.E_STREAM_MODE,System.Boolean)">
\param fileName Name of the sound file (e.g. "sounds/something.mp3"). You can also use this
		name when calling play3D() or play2D().
		\param mode Streaming mode for this sound source
		\param preload If this flag is set to false (which is default) the sound engine will
		not try to load the sound file when calling this method, but only when play() is called
		with this sound source as parameter. Otherwise the sound will be preloaded.
		\return Returns the pointer to the added sound source or 0 if not sucessful because for
		example a sound already existed with that name. If not successful, the reason will be printed
		into the log. Note: Don't call drop() to this pointer, it will be managed by irrKlang and
		exist as long as you don't delete irrKlang or call removeSoundSource(). However,
		you are free to call grab() if you want and drop() it then later of course. 
</member>
        <member name="M:irrklang.ISoundEngine.getSoundSource(System.Int32)">
\param idx: Index of the loaded sound source, must by smaller than getSoundSourceCount().
		\return Returns the sound source or 0 if not available.
		Note: Don't call drop() to this pointer, it will be managed by irrKlang and
		exist as long as you don't delete irrKlang or call removeSoundSource(). However,
		you are free to call grab() if you want and drop() it then later of course. 
</member>
        <member name="M:irrklang.ISoundEngine.getSoundSource(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
Please note: For performance reasons most ISoundEngine implementations will
		not try to load the sound when calling this method, but only when play() is called
		with this sound source as parameter. 
		\param addIfNotFound if 'true' adds the sound source to the list and returns the interface to it
		if it cannot be found in the sound source list. If 'false', returns 0 if the sound
		source is not in the list and does not modify the list. Default value: true.
		\return Returns the sound source or 0 if not available.
		Note: Don't call drop() to this pointer, it will be managed by irrKlang and
		exist as long as you don't delete irrKlang or call removeSoundSource(). However,
		you are free to call grab() if you want and drop() it then later of course. 
</member>
        <member name="M:irrklang.ISoundEngine.play3D(irrklang.ISoundSource*,irrklang.vec3d&lt;System.Single&gt;,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
An ISoundSource object will be created internally when playing a sound the first time,
		or can be added with getSoundSource(). There is some example code on how to work with 3D sound @ref sound3d.
		\param source The sound source, specifiying sound file source and default settings for this file.
		Use the other ISoundEngine::play2D() overloads if you want to specify a filename string instead of this.
		\param pos Position of the 3D sound.
		\param playLooped plays the sound in loop mode. If set to 'false', the sound is played once, then stopped and deleted from the internal playing list. Calls to
		 ISound have no effect after such a non looped sound has been stopped automaticly.
		\param startPaused starts the sound paused. This implies that track=true. Use this if you want to modify some of the playing
		 parameters before the sound actually plays. Usually you would set this parameter to true, then use the ISound interface to
		 modify some of the sound parameters and then call ISound::setPaused(false);
		 Note: You need to call ISound::drop() when setting this parameter to true and you don't need the ISound
		 object anymore. See 'return' for details.
		 \param track Makes it possible to track the sound. Causes the method to return an ISound interface. See 'return' for details.
		 \param enableSoundEffects Makes it possible to use sound effects such as chorus, distorsions, echo, 
		 reverb and similar for this sound. Sound effects can then be controlled via ISound::getSoundEffectControl().
		 Only enable if necessary. 
		 \return Only returns a pointer to an ISound if the parameters 'track', 'startPaused' or 
		 'enableSoundEffects' have been	 set to true. Note: if this method returns an ISound as result, 
		 you HAVE to call ISound::drop() after you don't need the ISound interface anymore. Otherwise this 
		 will cause memory waste. This method also may return 0 altough 'track', 'startPaused' or 
		 'enableSoundEffects' have been set to true, if the sound could not be played.
</member>
        <member name="M:irrklang.ISoundEngine.play3D(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,irrklang.vec3d&lt;System.Single&gt;,System.Boolean,System.Boolean,System.Boolean,irrklang.E_STREAM_MODE,System.Boolean)">
There is some example code on how to work with 3D sound at @ref sound3d.
		\param sourceFileName Filename of sound, like "sounds/test.wav" or "foobar.ogg".
		 \param pos Position of the 3D sound.
		 \param playLooped plays the sound in loop mode. If set to 'false', the sound is played once, then stopped and deleted from the internal playing list. Calls to
		 ISound have no effect after such a non looped sound has been stopped automaticly.
		 \param startPaused starts the sound paused. This implies that track=true. Use this if you want to modify some of the playing
		 parameters before the sound actually plays. Usually you would set this parameter to true, then use the ISound interface to
		 modify some of the sound parameters and then call ISound::setPaused(false);
		 Note: You need to call ISound::drop() when setting this parameter to true and you don't need the ISound
		 object anymore. See 'return' for details.
		 \param track Makes it possible to track the sound. Causes the method to return an ISound interface. See 'return' for details.
 		 \param streamMode Specifies if the file should be streamed or loaded completely into memory for playing.
		 ESM_AUTO_DETECT sets this to autodetection. Note: if the sound has been loaded or played before into the
		 engine, this parameter has no effect.
		 \param enableSoundEffects Makes it possible to use sound effects such as chorus, distorsions, echo, 
		 reverb and similar for this sound. Sound effects can then be controlled via ISound::getSoundEffectControl().
		 Only enable if necessary. 
		 \return Only returns a pointer to an ISound if the parameters 'track', 'startPaused' or 
		 'enableSoundEffects' have been	 set to true. Note: if this method returns an ISound as result, 
		 you HAVE to call ISound::drop() after you don't need the ISound interface anymore. Otherwise this 
		 will cause memory waste. This method also may return 0 altough 'track', 'startPaused' or 
		 'enableSoundEffects' have been set to true, if the sound could not be played.
</member>
        <member name="M:irrklang.ISoundEngine.play2D(irrklang.ISoundSource*,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
An ISoundSource object will be created internally when playing a sound the first time,
		or can be added with getSoundSource().
		\param source The sound source, specifiying sound file source and default settings for this file.
		Use the other ISoundEngine::play2D() overloads if you want to specify a filename string instead of this.
		\param playLooped plays the sound in loop mode. If set to 'false', the sound is played once, then stopped and deleted from the internal playing list. Calls to
		 ISound have no effect after such a non looped sound has been stopped automaticly.
		\param startPaused starts the sound paused. This implies that track=true. Use this if you want to modify some of the playing
		 parameters before the sound actually plays. Usually you would set this parameter to true, then use the ISound interface to
		 modify some of the sound parameters and then call ISound::setPaused(false);
		 Note: You need to call ISound::drop() when setting this parameter to true and you don't need the ISound
		 object anymore. See 'return' for details.
		 \param track Makes it possible to track the sound. Causes the method to return an ISound interface. See 'return' for details.
		 \param enableSoundEffects Makes it possible to use sound effects such as chorus, distorsions, echo, 
		 reverb and similar for this sound. Sound effects can then be controlled via ISound::getSoundEffectControl().
		 Only enable if necessary. 
		 \return Only returns a pointer to an ISound if the parameters 'track', 'startPaused' or 
		 'enableSoundEffects' have been	 set to true. Note: if this method returns an ISound as result, 
		 you HAVE to call ISound::drop() after you don't need the ISound interface anymore. Otherwise this 
		 will cause memory waste. This method also may return 0 altough 'track', 'startPaused' or 
		 'enableSoundEffects' have been set to true, if the sound could not be played.
</member>
        <member name="M:irrklang.ISoundEngine.play2D(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean,System.Boolean,System.Boolean,irrklang.E_STREAM_MODE,System.Boolean)">
\param sourceFileName Filename of sound, like "sounds/test.wav" or "foobar.ogg".
		 \param playLooped plays the sound in loop mode. If set to 'false', the sound is played once, then stopped and deleted from the internal playing list. Calls to
		 ISound have no effect after such a non looped sound has been stopped automaticly.
		 \param startPaused starts the sound paused. This implies that track=true. Use this if you want to modify some of the playing
		 parameters before the sound actually plays. Usually you would set this parameter to true, then use the ISound interface to
		 modify some of the sound parameters and then call ISound::setPaused(false);
		 Note: You need to call ISound::drop() when setting this parameter to true and you don't need the ISound
		 object anymore. See 'return' for details.
		 \param track Makes it possible to track the sound. Causes the method to return an ISound interface. See 'return' for details.
		 \param streamMode Specifies if the file should be streamed or loaded completely into memory for playing.
		 ESM_AUTO_DETECT sets this to autodetection. Note: if the sound has been loaded or played before into the
		 engine, this parameter has no effect.
		 \param enableSoundEffects Makes it possible to use sound effects such as chorus, distorsions, echo, 
		 reverb and similar for this sound. Sound effects can then be controlled via ISound::getSoundEffectControl().
		 Only enable if necessary. 
		 \return Only returns a pointer to an ISound if the parameters 'track', 'startPaused' or 
		 'enableSoundEffects' have been	 set to true. Note: if this method returns an ISound as result, 
		 you HAVE to call ISound::drop() after you don't need the ISound interface anymore. Otherwise this 
		 will cause memory waste. This method also may return 0 altough 'track', 'startPaused' or 
		 'enableSoundEffects' have been set to true, if the sound could not be played.
</member>
        <member name="M:irrklang.ISoundEngine.getDriverName">
Possible returned strings are "NULL", "ALSA", "CoreAudio", "winMM", 
		"DirectSound" and "DirectSound8". 
</member>
        <member name="T:irrklang.ISoundEngine">
This is the main interface of irrKlang. You usually would create this using
	the createIrrKlangDevice() function. 

</member>
        <member name="M:irrklang.IFileFactory.createFileReader(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Derive your own class from IFileFactory, overwrite this
		method and return your own implemented IFileReader to overwrite file access of irrKlang.
		Use ISoundEngine::addFileFactory() to let irrKlang know about your class.
		Example code can be found in the tutorial 04.OverrideFileAccess.
		\param filename Name of file to open.
		\return Returns a pointer to the created file interface.
		The returned pointer should be dropped when no longer needed.
		See IRefCounted::drop() for more information. Returns 0 if file cannot be opened. 
</member>
        <member name="T:irrklang.IFileFactory">
Derive your own class from IFileFactory, overwrite the createFileReader()
		method and return your own implemented IFileReader to overwrite file access of irrKlang.
		Use ISoundEngine::addFileFactory() to let irrKlang know about your class.
		Example code can be found in the tutorial 04.OverrideFileAccess.

</member>
        <member name="M:irrklang.ISound.setSoundStopEventReceiver(irrklang.ISoundStopEventReceiver*,System.Void*)">
This event is guaranteed to be called when the sound or sound stream is finished,
		either because the sound reached its playback end, its sound source was removed,
		ISoundEngine::stopAllSounds() has been called or the whole engine was deleted.
		There is an example on how to use events in irrklang at @ref events .
		\param receiver Interface to a user implementation of the sound receiver. This interface
		should be as long valid as the sound exists or another stop event receiver is set.
		Set this to null to set no sound stop event receiver.
		\param userData: A iser data pointer, can be null. 
</member>
        <member name="M:irrklang.ISound.getSoundEffectControl">
Sound effects such as Chorus, Distorsions, Echo, Reverb and similar can
		be controlled using this. The interface pointer is only valid as long as the ISound pointer is valid.
		If the ISound pointer gets dropped (IVirtualRefCounted::drop()), the ISoundEffects
		may not be used any more. 
		\return Returns a pointer to the sound effects interface if available. The sound
		has to be started via ISoundEngine::play2D() or ISoundEngine::play3D(),
		with the flag enableSoundEffects=true, otherwise 0 will be returned. Note that
		if the output driver does not support sound effects, 0 will be returned as well.
</member>
        <member name="M:irrklang.ISound.getPlayLength">
Returns -1 if not known for this sound for example because its decoder
		does not support length reporting or it is a file stream of unknown size.
		Note: You can also use ISoundSource::getPlayLength() to get the length of 
		a sound without actually needing to play it. 
</member>
        <member name="M:irrklang.ISound.getPlaybackSpeed">
See setPlaybackSpeed() for details 
</member>
        <member name="M:irrklang.ISound.setPlaybackSpeed(System.Single)">
Plays the sound at a higher or lower speed, increasing or decreasing its
		frequency which makes it sound lower or higher.
		Note that this feature is not available on all sound output drivers (it is on the
		DirectSound drivers at least), and it does not work together with the 
		'enableSoundEffects' parameter of ISoundEngine::play2D and ISoundEngine::play3D when
		using DirectSound.
		\param speed Factor of the speed increase or decrease. 2 is twice as fast, 
		0.5 is only half as fast. The default is 1.0.
		\return Returns true if sucessful, false if not. The current sound driver might not
		support changing the playBack speed, or the sound was started with the 
		'enableSoundEffects' parameter. 
</member>
        <member name="M:irrklang.ISound.setPlayPosition(System.UInt32)">
\param pos Position in milliseconds. Must be between 0 and the value returned
		by getPlayPosition().
		\return Returns true successful. False is returned for example if the sound already finished
		playing and is stopped or the audio source is not seekable, for example if it 
		is an internet stream or a a file format not supporting seeking (a .MOD file for example).
		A file can be tested if it can bee seeking using ISoundSource::getIsSeekingSupported(). 
</member>
        <member name="M:irrklang.ISound.getPlayPosition">
\return Returns -1 if not implemented or possible for this sound for example
		because it already has been stopped and freed internally or similar. 
</member>
        <member name="M:irrklang.ISound.getVelocity">
To use doppler effects use ISound::setVelocity to set a sounds velocity, 
		ISoundEngine::setListenerPosition() to set the listeners velocity and 
		ISoundEngine::setDopplerEffectParameters() to adjust two parameters influencing 
		the doppler effects intensity. 
</member>
        <member name="M:irrklang.ISound.setVelocity(irrklang.vec3d&lt;System.Single&gt;)">
To use doppler effects use ISound::setVelocity to set a sounds velocity, 
		ISoundEngine::setListenerPosition() to set the listeners velocity and 
		ISoundEngine::setDopplerEffectParameters() to adjust two parameters influencing 
		the doppler effects intensity. 
</member>
        <member name="M:irrklang.ISound.getMaxDistance">
See setMaxDistance() for details. 
</member>
        <member name="M:irrklang.ISound.setMaxDistance(System.Single)">
Changing this value is usually not necessary. Use setMinDistance() instead.
		Don't change this value if you don't know what you are doing: This value causes the sound
		to stop attenuating after it reaches the max distance. Most people think that this sets the
		volume of the sound to 0 after this distance, but this is not true. Only change the
		minimal distance (using for example setMinDistance()) to influence this.
		The maximum distance for a sound source is the distance beyond which the sound does not get any quieter.
		The default minimum distance is 1, the default max distance is a huge number like 1000000000.0f. 
</member>
        <member name="M:irrklang.ISound.getMinDistance">
See setMinDistance() for details. 
</member>
        <member name="M:irrklang.ISound.setMinDistance(System.Single)">
Changes the distance at which the 3D sound stops getting louder. This works
		like this: As a listener approaches a 3D sound source, the sound gets louder.
		Past a certain point, it is not reasonable for the volume to continue to increase.
		Either the maximum (zero) has been reached, or the nature of the sound source
		imposes a logical limit. This is the minimum distance for the sound source.
		Similarly, the maximum distance for a sound source is the distance beyond
		which the sound does not get any quieter.
		The default minimum distance is 1, the default max distance is a huge number like 1000000000.0f. 
</member>
        <member name="M:irrklang.ISound.isFinished">
Don't mix this up with isPaused(). isFinished() returns if the sound has been
		finished playing. If it has, is maybe already have been removed from the playing list of the
		sound engine and calls to any other of the methods of ISound will not have any result.
		If you call stop() to a playing sound will result that this function will return true
		when invoked. 
</member>
        <member name="M:irrklang.ISound.setIsLooped(System.Boolean)">
If the sound is playing looped and it is changed to not-looped, then it 
		will stop playing after the loop has finished. 
		If it is not looped and changed to looped, the sound will start repeating to be 
		played when it reaches its end. 
		Invoking this method will not have an effect when the sound already has stopped. 
</member>
        <member name="M:irrklang.ISound.setVolume(System.Single)">
This volume gets multiplied with the master volume of the sound engine
		and other parameters like distance to listener when played as 3d sound.  
</member>
        <member name="M:irrklang.ISound.getVolume">
(this volume gets multiplied with the master volume of the sound engine
		and other parameters like distance to listener when played as 3d sound)  
</member>
        <member name="M:irrklang.ISound.stop">
If you just want to pause the sound, use setIsPaused().
		After calling stop(), isFinished() will usually return true. 
</member>
        <member name="M:irrklang.ISound.getSoundSource">
\return Returns the sound source poitner of this sound. May return 0 if the sound source
		has been removed.
</member>
        <member name="T:irrklang.ISound">
The sound can be stopped, its volume or pan changed, effects added/removed
	and similar using this interface.
	Creating sounds is done using ISoundEngine::play2D() or ISoundEngine::play3D(). 
	More informations about the source of a sound can be obtained from the ISoundSource
	interface. 
</member>
        <member name="M:irrklang.ISoundEffectControl.enableWavesReverbSoundEffect(System.Single,System.Single,System.Single,System.Single)">
\param fInGain Input gain of signal, in decibels (dB). Min/Max: [-96.0,0.0] Default: 0.0 dB.
		If this sound effect is already enabled, calling this only modifies the parameters of the active effect.
		\param fReverbMix Reverb mix, in dB. Min/Max: [-96.0,0.0] Default: 0.0 dB
		\param fReverbTime Reverb time, in milliseconds. Min/Max: [0.001,3000.0] Default: 1000.0 ms
		\param fHighFreqRTRatio High-frequency reverb time ratio. Min/Max: [0.001,0.999] Default: 0.001 
		\return Returns true if successful. 
</member>
        <member name="M:irrklang.ISoundEffectControl.enableParamEqSoundEffect(System.Single,System.Single,System.Single)">
Parametric equalizer amplifies or attenuates signals of a given frequency. 
		If this sound effect is already enabled, calling this only modifies the parameters of the active effect.
		\param fCenter Center frequency, in hertz, The default value is 8000. Minimal Value:80, Maximal Value:16000.0f
		\param fBandwidth Bandwidth, in semitones, The default value is 12. Minimal Value:1.0f, Maximal Value:36.0f
		\param fGain Gain, default value is 0. Minimal Value:-15.0f, Maximal Value:15.0f
		\return Returns true if successful. 
</member>
        <member name="M:irrklang.ISoundEffectControl.enableI3DL2ReverbSoundEffect(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
An implementation of the listener properties in the I3DL2 specification. Source properties are not supported.
		If this sound effect is already enabled, calling this only modifies the parameters of the active effect.
		\param lRoom Attenuation of the room effect, in millibels (mB). Interval: [-10000, 0] Default: -1000 mB
		\param lRoomHF Attenuation of the room high-frequency effect. Interval: [-10000, 0]      default: 0 mB
		\param flRoomRolloffFactor Rolloff factor for the reflected signals. Interval: [0.0, 10.0]      default: 0.0
		\param flDecayTime Decay time, in seconds. Interval: [0.1, 20.0]      default: 1.49s
		\param flDecayHFRatio Ratio of the decay time at high frequencies to the decay time at low frequencies. Interval: [0.1, 2.0]       default: 0.83
		\param lReflections Attenuation of early reflections relative to lRoom. Interval: [-10000, 1000]   default: -2602 mB
		\param flReflectionsDelay Delay time of the first reflection relative to the direct path in seconds. Interval: [0.0, 0.3]       default: 0.007 s
		\param lReverb Attenuation of late reverberation relative to lRoom, in mB. Interval: [-10000, 2000]   default: 200 mB
		\param flReverbDelay Time limit between the early reflections and the late reverberation relative to the time of the first reflection. Interval: [0.0, 0.1]       default: 0.011 s
		\param flDiffusion Echo density in the late reverberation decay in percent. Interval: [0.0, 100.0]     default: 100.0 %
		\param flDensity Modal density in the late reverberation decay, in percent. Interval: [0.0, 100.0]     default: 100.0 %
		\param flHFReference Reference high frequency, in hertz. Interval: [20.0, 20000.0]  default: 5000.0 Hz 
		\return Returns true if successful. 
</member>
        <member name="M:irrklang.ISoundEffectControl.enableGargleSoundEffect(System.Int32,System.Boolean)">
The gargle effect modulates the amplitude of the signal. 
		If this sound effect is already enabled, calling this only modifies the parameters of the active effect.
		\param rateHz Rate of modulation, in Hertz. Minimal Value:1, Maximal Value:1000
		\param sinusWaveForm True for sinus wave form, false for triangle.
		\return Returns true if successful. 
</member>
        <member name="M:irrklang.ISoundEffectControl.enableFlangerSoundEffect(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Single,System.Int32)">
Flange is an echo effect in which the delay between the original 
		signal and its echo is very short and varies over time. The result is 
		sometimes referred to as a sweeping sound. The term flange originated
		with the practice of grabbing the flanges of a tape reel to change the speed. 
		If this sound effect is already enabled, calling this only modifies the parameters of the active effect.
		\param fWetDryMix Ratio of wet (processed) signal to dry (unprocessed) signal. Minimal Value:0, Maximal Value:100.0f;
		\param fDepth Percentage by which the delay time is modulated by the low-frequency oscillator, in hundredths of a percentage point. Minimal Value:0, Maximal Value:100.0f;
		\param fFeedback Percentage of output signal to feed back into the effect's input. Minimal Value:-99, Maximal Value:99.0f;
		\param fFrequency Frequency of the LFO. Minimal Value:0, Maximal Value:10.0f;
		\param triangleWaveForm True for triangle wave form, false for square.
		\param fDelay Number of milliseconds the input is delayed before it is played back. Minimal Value:0, Maximal Value:20.0f;
		\param lPhase Phase differential between left and right LFOs. Possible values:
			-180, -90, 0, 90, 180
		\return Returns true if successful. 
</member>
        <member name="M:irrklang.ISoundEffectControl.enableEchoSoundEffect(System.Single,System.Single,System.Single,System.Single,System.Int32)">
An echo effect causes an entire sound to be repeated after a fixed delay.
		If this sound effect is already enabled, calling this only modifies the parameters of the active effect.
		\param fWetDryMix Ratio of wet (processed) signal to dry (unprocessed) signal. Minimal Value:0, Maximal Value:100.0f;
		\param fFeedback Percentage of output fed back into input. Minimal Value:0, Maximal Value:100.0f;
		\param fLeftDelay Delay for left channel, in milliseconds. Minimal Value:1, Maximal Value:2000.0f;
		\param fRightDelay Delay for right channel, in milliseconds. Minimal Value:1, Maximal Value:2000.0f;
		\param lPanDelay Value that specifies whether to swap left and right delays with each successive echo. Minimal Value:0, Maximal Value:1;
		\return Returns true if successful. 
</member>
        <member name="M:irrklang.ISoundEffectControl.enableDistortionSoundEffect(System.Single,System.Single,System.Single,System.Single,System.Single)">
Distortion is achieved by adding harmonics to the signal in such a way that,
		If this sound effect is already enabled, calling this only modifies the parameters of the active effect.
		as the level increases, the top of the waveform becomes squared off or clipped.
		\param fGain Amount of signal change after distortion. Minimal Value:-60, Maximal Value:0;
		\param fEdge Percentage of distortion intensity. Minimal Value:0, Maximal Value:100;
		\param fPostEQCenterFrequency Center frequency of harmonic content addition. Minimal Value:100, Maximal Value:8000;
		\param fPostEQBandwidth Width of frequency band that determines range of harmonic content addition. Minimal Value:100, Maximal Value:8000;
		\param fPreLowpassCutoff Filter cutoff for high-frequency harmonics attenuation. Minimal Value:100, Maximal Value:8000;
		\return Returns true if successful. 
</member>
        <member name="M:irrklang.ISoundEffectControl.enableCompressorSoundEffect(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
Compressor is a reduction in the fluctuation of a signal above a certain amplitude. 
		If this sound effect is already enabled, calling this only modifies the parameters of the active effect.
		\param fGain Output gain of signal after Compressor. Minimal Value:-60, Maximal Value:60.0f;
		\param fAttack Time before Compressor reaches its full value. Minimal Value:0.01, Maximal Value:500.0f;
		\param fRelease Speed at which Compressor is stopped after input drops below fThreshold. Minimal Value:50, Maximal Value:3000.0f;
		\param fThreshold Point at which Compressor begins, in decibels. Minimal Value:-60, Maximal Value:0.0f;
		\param fRatio Compressor ratio. Minimal Value:1, Maximal Value:100.0f;
		\param fPredelay Time after lThreshold is reached before attack phase is started, in milliseconds. Minimal Value:0, Maximal Value:4.0f;
		\return Returns true if successful. 
</member>
        <member name="M:irrklang.ISoundEffectControl.enableChorusSoundEffect(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Single,System.Int32)">
Chorus is a voice-doubling effect created by echoing the
		original sound with a slight delay and slightly modulating the delay of the echo. 
		If this sound effect is already enabled, calling this only modifies the parameters of the active effect.
		\param fWetDryMix Ratio of wet (processed) signal to dry (unprocessed) signal. Minimal Value:0, Maximal Value:100.0f;
		\param fDepth Percentage by which the delay time is modulated by the low-frequency oscillator, in hundredths of a percentage point. Minimal Value:0, Maximal Value:100.0f;
		\param fFeedback Percentage of output signal to feed back into the effect's input. Minimal Value:-99, Maximal Value:99.0f;
		\param fFrequency Frequency of the LFO. Minimal Value:0, Maximal Value:10.0f;
		\param sinusWaveForm True for sinus wave form, false for triangle.
		\param fDelay Number of milliseconds the input is delayed before it is played back. Minimal Value:0, Maximal Value:20.0f;
		\param lPhase Phase differential between left and right LFOs. Possible values:
			-180, -90, 0, 90, 180
		\return Returns true if successful. 
</member>
        <member name="T:irrklang.ISoundEffectControl">
Sound effects such as chorus, distorsions, echo, reverb and similar can
	be controlled using this. An instance of this interface can be obtained via
	ISound::getSoundEffectControl(). The sound containing this interface has to be started via 
	ISoundEngine::play2D() or ISoundEngine::play3D() with the flag enableSoundEffects=true, 
	otherwise no acccess to this interface will be available.
	For the DirectSound driver, these are effects available since DirectSound8. For most 
	effects, sounds should have a sample rate of 44 khz and should be at least
	150 milli seconds long for optimal quality when using the DirectSound driver.
	Note that the interface pointer is only valid as long as
	the ISound pointer is valid. If the ISound pointer gets dropped (IVirtualRefCounted::drop()),
	the ISoundEffects may not be used any more. 
</member>
        <member name="M:irrklang.ISoundSource.getSampleData">
\return Returns a pointer to the sample data. The data is provided in decoded PCM data. The
		exact format can be retrieved using getAudioFormat(). Use getAudioFormat().getSampleDataSize()
		for getting the amount of bytes. The returned pointer will only be valid as long as the sound
		source exists.
		This function will only return a pointer to the data if the 
		audio file is not streamed, namely ESM_NO_STREAMING. Otherwise this function will return 0.
		Note: If the sound never has been played before, the sound engine will have to open
		the file and decode audio data from there, so this call could take a bit depending
		on the type of the file.
</member>
        <member name="M:irrklang.ISoundSource.getForcedStreamingThreshold">
 The value is specified in uncompressed bytes and its default value is 
		about one Megabyte. See setForcedStreamingThreshold() for details. 
</member>
        <member name="M:irrklang.ISoundSource.setForcedStreamingThreshold(System.Int32)">
When specifying ESM_NO_STREAMING for playing back a sound file, irrKlang will
		ignore this setting if the file is bigger than this threshold and stream the file
		anyway. Please note that if an audio format loader is not able to return the 
		size of a sound source and returns -1 as length, this will be ignored as well 
		and streaming has to be forced.
		\param threshold: New threshold. The value is specified in uncompressed bytes and its default value is 
		about one Megabyte. Set to 0 or a negative value to disable stream forcing. 
</member>
        <member name="M:irrklang.ISoundSource.forceReloadAtNextUse">
Sounds which are not played as streams are buffered to make it possible to
		replay them without much overhead. If the sound file is altered after the sound
		has been played the first time, the engine won't play the changed file then.
		Calling this method makes the engine reload the file before the file is played
		the next time.
</member>
        <member name="M:irrklang.ISoundSource.getDefaultMaxDistance">
This value influences how loud a sound is heard based on its distance.
		Changing this value is usually not necessary. Use setDefaultMinDistance() instead.
		Don't change this value if you don't know what you are doing: This value causes the sound
		to stop attenuating after it reaches the max distance. Most people think that this sets the
		volume of the sound to 0 after this distance, but this is not true. Only change the
		minimal distance (using for example setDefaultMinDistance()) to influence this.
		See ISound::setMaxDistance() for details about what the max distance is.
		\return Default maximal distance for 3D sounds from this source. If setDefaultMaxDistance()
		was set to a negative value, it will return the default value set in the engine,
		using ISoundEngine::setDefault3DSoundMaxDistance(). Default value is -1, causing
		the default max distance of the sound engine to take effect. 
</member>
        <member name="M:irrklang.ISoundSource.setDefaultMaxDistance(System.Single)">
 Changing this value is usually not necessary. Use setDefaultMinDistance() instead.
		Don't change this value if you don't know what you are doing: This value causes the sound
		to stop attenuating after it reaches the max distance. Most people think that this sets the
		volume of the sound to 0 after this distance, but this is not true. Only change the
		minimal distance (using for example setDefaultMinDistance()) to influence this.
		See ISound::setMaxDistance() for details about what the max distance is.
		This method only influences the initial distance value of sounds. For changing the
		distance while the sound is played, use ISound::setMinDistance() 
		and ISound::setMaxDistance().
		\param maxDistance Default maximal distance for 3D sounds from this source. Set it to a negative
		value to let sounds of this source use the engine level default max distance, which
		can be set via ISoundEngine::setDefault3DSoundMaxDistance(). Default value is -1, causing
		the default max distance of the sound engine to take effect. 
</member>
        <member name="M:irrklang.ISoundSource.getDefaultMinDistance">
 This value influences how loud a sound is heard based on its distance.
		See ISound::setMinDistance() for details about what the minimal distance is.
		\return Default minimal distance for 3d sounds from this source. If setDefaultMinDistance()
		was set to a negative value, it will return the default value set in the engine,
		using ISoundEngine::setDefault3DSoundMinDistance(). Default value is -1, causing
		the default min distance of the sound engine to take effect. 
</member>
        <member name="M:irrklang.ISoundSource.setDefaultMinDistance(System.Single)">
 This value influences how loud a sound is heard based on its distance.
		See ISound::setMinDistance() for details about what the min distance is.
		This method only influences the initial distance value of sounds. For changing the
		distance while the sound is playing, use ISound::setMinDistance() and ISound::setMaxDistance().
		\param minDistance: Default minimal distance for 3D sounds from this source. Set it to a negative
		value to let sounds of this source use the engine level default min distance, which
		can be set via ISoundEngine::setDefault3DSoundMinDistance(). Default value is -1, causing
		the default min distance of the sound engine to take effect. 
</member>
        <member name="M:irrklang.ISoundSource.getDefaultVolume">
You can influence this default volume value using setDefaultVolume().
		Note that the default volume is being multiplied with the master volume
		of ISoundEngine, change this via ISoundEngine::setSoundVolume(). 
		//! \return 0 (silent) to 1.0f (full volume). Default value is 1.0f. 
</member>
        <member name="M:irrklang.ISoundSource.setDefaultVolume(System.Single)">
The default value of this is 1.0f. 
		Note that the default volume is being multiplied with the master volume
		of ISoundEngine, change this via ISoundEngine::setSoundVolume(). 
		//! \param volume 0 (silent) to 1.0f (full volume). Default value is 1.0f. 
</member>
        <member name="M:irrklang.ISoundSource.getAudioFormat">
\return Returns the structure filled with 0 or negative values if not known for this sound for example because 
		because the file could not be opened or similar.
		Note: If the sound never has been played before, the sound engine will have to open
		the file and try to get the play lenght from there, so this call could take a bit depending
		on the type of file. 
</member>
        <member name="M:irrklang.ISoundSource.getPlayLength">
Returns -1 if not known for this sound for example because its decoder
		does not support lenght reporting or it is a file stream of unknown size.
		Note: If the sound never has been played before, the sound engine will have to open
		the file and try to get the play lenght from there, so this call could take a bit depending
		on the type of file. 
</member>
        <member name="M:irrklang.ISoundSource.getStreamMode">
Note: If the returned type is ESM_AUTO_DETECT, this mode will change after the
		sound has been played the first time. 
</member>
        <member name="M:irrklang.ISoundSource.setStreamMode(irrklang.E_STREAM_MODE)">
Note that if this is set to ESM_NO_STREAMING, the engine still might decide
		to stream the sound if it is too big. The threashold for this can be 
		adjusted using ISoundSource::setForcedStreamingThreshold(). 
</member>
        <member name="T:irrklang.ISoundSource">
It provides some informations about the sound source like the play lenght and
	can have default settings for volume, distances for 3d etc. There is some example code on how
	to use Sound sources at @ref soundSources.
</member>
        <member name="F:irrklang.SAudioStreamFormat.FrameCount">
If the stream has an unknown lenght, this is -1 
</member>
        <member name="T:irrklang.E_SOUND_ENGINE_OPTIONS">
When using createIrrKlangDevice, use a combination of this these
	as 'options' parameter to start up the engine. By default, irrKlang
	uses ESEO_DEFAULT_OPTIONS, which is set to the combination 
	ESEO_MULTI_THREADED | ESEO_LOAD_PLUGINS | ESEO_USE_3D_BUFFERS | ESEO_PRINT_DEBUG_INFO_TO_DEBUGGER | ESEO_PRINT_DEBUG_INFO_TO_STDOUT. 
</member>
        <member name="F:ESEO_FORCE_32_BIT">
Don't use this. 
</member>
        <member name="F:ESEO_LINEAR_ROLLOFF">
If specified, instead of the default logarithmic one, irrKlang will 
		 use a linear rolloff model which influences the attenuation 
		 of the sounds over distance. The volume is interpolated linearly between the MinDistance
		 and MaxDistance, making it possible to adjust sounds more easily although this is not
		 physically correct.
		 Note that this option may not work when used together with the ESEO_USE_3D_BUFFERS
		 option when using Direct3D for example, irrKlang will then turn off ESEO_USE_3D_BUFFERS
		 automaticly to be able to use this option and write out a warning. 
</member>
        <member name="F:ESEO_PRINT_DEBUG_INFO_TO_STDOUT">
irrKlang will print debug info and status messages stdout, the console window in Windows. 
</member>
        <member name="F:ESEO_PRINT_DEBUG_INFO_TO_DEBUGGER">
irrKlang will print debug info and status messages to any windows debugger supporting 
		OutputDebugString() (like VisualStudio).
		This is useful if your application does not capture any console output (see ESEO_PRINT_DEBUG_INFO_TO_STDOUT). 
</member>
        <member name="F:ESEO_USE_3D_BUFFERS">
If this flag is not specified, all buffers will by created
		in 2D only and 3D positioning will be emulated in software, making the engine run
		faster if hardware 3d audio is slow on the system.  
</member>
        <member name="F:ESEO_LOAD_PLUGINS">
Plugins usually are .dll, .so or .dylib
		files named for example ikpMP3.dll (= short for irrKlangPluginMP3) which are executed
		after the startup of the sound engine and modify it for example to make it possible
		to play back mp3 files. Plugins are being loaded from the current working directory 
		as well as from the position where the .exe using the irrKlang library resides. 
		It is also possible to load the plugins after the engine has started up using 
		ISoundEngine::loadPlugins(). 
</member>
        <member name="F:ESEO_MUTE_IF_NOT_FOCUSED">
This will only work when irrKlang is using the DirectSound output driver. 
</member>
        <member name="F:ESEO_MULTI_THREADED">
Using this flag, irrKlang will update
		all streams, sounds, 3d positions and whatever automaticly. You also don't need to call ISoundEngine::update()
		if irrKlang is running multithreaded. However, if you want to run irrKlang in the same thread
		as your application (for easier debugging for example), don't set this. But you need to call ISoundEngine::update()
		as often as you can (at least about 2-3 times per second) to make irrKlang update everything correctly then. 
</member>
        <member name="T:irrklang.E_SOUND_OUTPUT_DRIVER">
Values of this enumeration can be used as parameter when calling createIrrKlangDevice(). 
</member>
        <member name="F:ESOD_DIRECT_SOUND_8">
In contrast to ESOD_DIRECT_SOUND, this supports sophisticated sound effects
		but may not be available on old windows versions. It behaves very similar 
		to ESOD_DIRECT_SOUND but also supports DX8 sound effects.
</member>
        <member name="M:irrklang.IVirtualRefCounted.drop">
To be implemented by the derived class. If you don't want to
		implement this, use the class IRefCounted instead. See IRefCounted::grab() for details
		of this method. 
</member>
        <member name="M:irrklang.IVirtualRefCounted.grab">
To be implemented by the derived class. If you don't want to
		implement this, use the class IRefCounted instead. See IRefCounted::grab() for details
		of this method. 
</member>
        <member name="T:irrklang.IVirtualRefCounted">
See IRefCounted for the basics of this class.
	The difference to IRefCounted is that the class has to implement reference counting
	for itself. 

</member>
        <member name="T:irrklang.IRefCounted">
This class provides reference counting through the methods grab() and drop().
	It also is able to store a debug string for every instance of an object.
	Most objects of irrKlang are derived from IRefCounted, and so they are reference counted.

	When you create an object in irrKlang, calling a method
	which starts with 'create', an object is created, and you get a pointer
	to the new object. If you no longer need the object, you have 
	to call drop(). This will destroy the object, if grab() was not called
	in another part of you program, because this part still needs the object.
	Note, that you only need to call drop() to the object, if you created it,
	and the method had a 'create' in it. 

	A simple example:

	If you want to create a texture, you may want to call an imaginable method
	IDriver::createTexture. You call
	ITexture* texture = driver-&gt;createTexture(128, 128);
	If you no longer need the texture, call texture-&gt;drop().

	If you want to load a texture, you may want to call imaginable method
	IDriver::loadTexture. You do this like
	ITexture* texture = driver-&gt;loadTexture("example.jpg");
	You will not have to drop the pointer to the loaded texture, because
	the name of the method does not start with 'create'. The texture
	is stored somewhere by the driver.

</member>
        <member name="D:irrklang.ik_f64">
This is a typedef for double, it ensures portability of the engine. 
</member>
        <member name="D:irrklang.ik_f32">
This is a typedef for float, it ensures portability of the engine. 
</member>
        <member name="D:irrklang.ik_s32">
This is a typedef for signed int, it ensures portability of the engine. 
</member>
        <member name="D:irrklang.ik_u32">
This is a typedef for unsigned int, it ensures portability of the engine. 
</member>
        <member name="D:irrklang.ik_s16">
This is a typedef for signed short, it ensures portability of the engine. 
</member>
        <member name="D:irrklang.ik_u16">
This is a typedef for unsigned short, it ensures portability of the engine. 
</member>
        <member name="D:irrklang.ik_c8">
This is a typedef for char, it ensures portability of the engine. 
</member>
        <member name="D:irrklang.ik_s8">
This is a typedef for signed char, it ensures portability of the engine. 
</member>
        <member name="D:irrklang.ik_u8">
This is a typedef for unsigned char, it ensures portability of the engine. 
</member>
        <member name="M:DrawWarningHUD">
Draw a warning HUD if dangerous dinosaurs are nearby
@author tminard

</member>
        <member name="M:CreatureBrain.Boot">
Load main storage "memory" and temp/current_state "memory"

</member>
        <member name="M:Creature.Update">
Update and process AI characteristics and move the character in response

</member>
        <member name="M:Creature.Place(System.Single,System.Single)">
Place the character at the specified location. Return true if OK. False if failed

</member>
        <member name="M:Creature.Reset">
Reset character information to the defaults. Totally blanks the creature and sets to default data

</member>
        <member name="M:Creature.Load(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
Load character information and characteristics

</member>
        <member name="M:Creature.#ctor">
Constructor 

</member>
        <member name="T:Creature">
Generic Class for creatures. Includes basic AI, which can be overridden by each creature type

</member>
        <member name="M:CharacterModel.Load(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
Load from file

</member>
        <member name="M:CharacterModel._correct">
Make final corrections/optimiztions to loaded model data.
@access protected

</member>
        <member name="M:CharacterModel._releaseData">
Release memory to loaded data and reset loaded data
@access protected

</member>
        <member name="M:CharacterModel._brightenTexture(System.UInt16*,System.Int32)">
Brighten the texture according to user settings. Also, if its night time then apply the green effect as well
@access protected

</member>
        <member name="M:CharacterModel._DATASHIFT(System.UInt16*,System.Int32)">
Not sure what this does
@access protected

</member>
        <member name="M:CharacterModel._generateModelMipMaps(TagMODEL*)">
Generate the models mipmaps on the textures
@access protected

</member>
        <member name="M:CharacterModel._generateAlphaFlags(TagMODEL*)">
Generate alpha transparency for model textures
NOTE: Only in D3d or Glide mode; not in software
@access protected

</member>
        <member name="T:CharacterModel">
CharacterModel class
Contains Animation and model data for the model. The model hasMany animations and hasOne model data.
This class only manages animation and model data, not sounds or AI characteristics.

</member>
        <member name="M:CharacterAnimation.Process">
Process the animation.
1) Play the sound if needed

</member>
        <member name="T:CharacterAnimation">
CharacterAnimation class
Load the animation information.
This code does not manage the actual model animating. This is a child of CharacterModel, and therefore only 
contains ONE animation data (which may contain several frames within itself).
It does, however, contain its own sound and manages the playing of it(maybe?).
Each animation has only one sound at the moment.
Access is public, because CharacterAnimation is primarily a container of information. It does not manage its 'models'
animation process.

</member>
        <member name="M:MakeShotNew(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
This function has more advanced water-hit detection (to enable bullets passing
through water), but the path is messed up (bullet path is a few inches below where
the player is aiming....

</member>
        <member name="F:RakNet.BitStream.stackData">
BitStreams that use less than BITSTREAM_STACK_ALLOCATION_SIZE use the stack, rather than the heap to store data.  It switches over if BITSTREAM_STACK_ALLOCATION_SIZE is exceeded
</member>
        <member name="F:RakNet.BitStream.copyData">
true if the internal buffer is copy of the data passed to the constructor
</member>
        <member name="M:RakNet.BitStream.ReadCompressed(System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Assume the input source points to a compressed native type. Decompress and read it.
</member>
        <member name="M:RakNet.BitStream.WriteCompressed(System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Assume the input source points to a native type, compress and write it.
</member>
        <member name="M:RakNet.BitStream.DoEndianSwap">
---- Member function template specialization declarations ----
</member>
        <member name="M:RakNet.BitStream.GetNumberOfBitsAllocated">
\internal
\return How many bits have been allocated internally
</member>
        <member name="M:RakNet.BitStream.AddBitsAndReallocate(System.UInt32!System.Runtime.CompilerServices.IsConst)">
Reallocates (if necessary) in preparation of writing numberOfBitsToWrite
</member>
        <member name="M:RakNet.BitStream.SetNumberOfBitsAllocated(System.UInt32!System.Runtime.CompilerServices.IsConst)">
Use this if you pass a pointer copy to the constructor
*(_copyData==false) and want to overallocate to prevent
*reallocation
</member>
        <member name="M:RakNet.BitStream.AssertCopyData">
If we used the constructor version with copy data off, this
*makes sure it is set to on and the data pointed to is copied.
</member>
        <member name="M:RakNet.BitStream.ReadBit">
Reads 1 bit and returns true if that bit is 1 and false if it is 0
</member>
        <member name="M:RakNet.BitStream.Write1">
Write a 1
</member>
        <member name="M:RakNet.BitStream.Write0">
Write a 0
</member>
        <member name="M:RakNet.BitStream.ReadBits(System.Byte*,System.UInt32,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Read \a numberOfBitsToRead bits to the output source
alignBitsToRight should be set to true to convert internal
bitstream data to userdata. It should be false if you used
WriteBits with rightAlignedBits false
\param[in] output The resulting bits array
\param[in] numberOfBitsToRead The number of bits to read
\param[in] alignBitsToRight if true bits will be right aligned.
\return true if there is enough bits to read
</member>
        <member name="M:RakNet.BitStream.AlignReadToByteBoundary">
Align the next write and/or read to a byte boundary.  This can
be used to 'waste' bits to byte align for efficiency reasons It
can also be used to force coalesced bitstreams to start on byte
boundaries so so WriteAlignedBits and ReadAlignedBits both
calculate the same offset when aligning.
</member>
        <member name="M:RakNet.BitStream.AlignWriteToByteBoundary">
Align the next write and/or read to a byte boundary.  This can
be used to 'waste' bits to byte align for efficiency reasons It
can also be used to force coalesced bitstreams to start on byte
boundaries so so WriteAlignedBits and ReadAlignedBits both
calculate the same offset when aligning.
</member>
        <member name="M:RakNet.BitStream.ReadAlignedBytesSafeAlloc(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst)">
Same as ReadAlignedBytesSafe() but allocates the memory for you using new, rather than assuming it is safe to write to
\param[in] input input will be deleted if it is not a pointer to 0
</member>
        <member name="M:RakNet.BitStream.ReadAlignedBytesSafe(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst)">
Reads what was written by WriteAlignedBytesSafe
\param[in] input The data
\param[in] maxBytesToRead Maximum number of bytes to read
</member>
        <member name="M:RakNet.BitStream.ReadAlignedBytes(System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsConst)">
Read bits, starting at the next aligned bits. Note that the
modulus 8 starting offset of the sequence must be the same as
was used with WriteBits. This will be a problem with packet
coalescence unless you byte align the coalesced packets.
\param[in] output The byte array larger than @em numberOfBytesToRead
\param[in] numberOfBytesToRead The number of byte to read from the internal state
\return true if there is enough byte.
</member>
        <member name="M:RakNet.BitStream.WriteAlignedBytesSafe(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst)">
Aligns the bitstream, writes inputLength, and writes input. Won't write beyond maxBytesToWrite
\param[in] input The data
\param[in] inputLength The size of input.
\param[in] maxBytesToWrite Max bytes to write
</member>
        <member name="M:RakNet.BitStream.WriteAlignedBytes(System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst)">
Align the bitstream to the byte boundary and then write the
specified number of bits.  This is faster than WriteBits but
wastes the bits to do the alignment and requires you to call
ReadAlignedBits at the corresponding read position.
\param[in] input The data
\param[in] numberOfBytesToWrite The size of input.
</member>
        <member name="M:RakNet.BitStream.WriteBits(System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Write numberToWrite bits from the input source Right aligned
data means in the case of a partial byte, the bits are aligned
from the right (bit 0) rather than the left (as in the normal
internal representation) You would set this to true when
writing user data, and false when copying bitstream data, such
as writing one bitstream to another
\param[in] input The data
\param[in] numberOfBitsToWrite The number of bits to write
\param[in] rightAlignedBits if true data will be right aligned
</member>
        <member name="M:RakNet.BitStream.GetData">
Gets the data that BitStream is writing to / reading from
Partial bytes are left aligned.
\return A pointer to the internal state
</member>
        <member name="M:RakNet.BitStream.SetData(System.Byte*)">
Set the stream to some initial data.
\internal
</member>
        <member name="M:RakNet.BitStream.CopyData(System.Byte**)">
Makes a copy of the internal data for you \a _data will point to
the stream. Returns the length in bits of the stream. Partial
bytes are left aligned
\param[out] _data The allocated copy of GetData()
</member>
        <member name="M:RakNet.BitStream.GetNumberOfUnreadBits">
Returns the number of bits left in the stream that haven't been read
</member>
        <member name="M:RakNet.BitStream.GetReadOffset">
Returns the number of bits into the stream that we have read
</member>
        <member name="M:RakNet.BitStream.GetNumberOfBytesUsed">
Returns the length in bytes of the stream
</member>
        <member name="M:RakNet.BitStream.GetNumberOfBitsUsed">
Returns the length in bits of the stream
</member>
        <member name="M:RakNet.BitStream.SetWriteOffset(System.UInt32!System.Runtime.CompilerServices.IsConst)">
Move the write pointer to a position on the array.
\param[in] offset the offset from the start of the array.
\attention
Dangerous if you don't know what you are doing!
For efficiency reasons you can only write mid-stream if your data is byte aligned.
</member>
        <member name="M:RakNet.BitStream.IgnoreBytes(System.UInt32!System.Runtime.CompilerServices.IsConst)">
Ignore data we don't intend to read
\param[in] numberOfBits The number of bytes to ignore
</member>
        <member name="M:RakNet.BitStream.IgnoreBits(System.UInt32!System.Runtime.CompilerServices.IsConst)">
Ignore data we don't intend to read
\param[in] numberOfBits The number of bits to ignore
</member>
        <member name="M:RakNet.BitStream.PrintBits(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
RAKNET_DEBUG_PRINTF the bits in the stream.  Great for debugging.
</member>
        <member name="M:RakNet.BitStream.AssertStreamEmpty">
This is good to call when you are done with the stream to make
sure you didn't leave any data left over void
</member>
        <member name="M:RakNet.BitStream.ResetWritePointer">
Sets the write pointer back to the beginning of your data.
</member>
        <member name="M:RakNet.BitStream.ResetReadPointer">
Sets the read pointer back to the beginning of your data.
</member>
        <member name="M:RakNet.BitStream.Read(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt32!System.Runtime.CompilerServices.IsConst)">
Read an array or casted stream of byte. The array
is raw data. There is no automatic endian conversion with this function
\param[in] output The result byte array. It should be larger than @em numberOfBytes.
\param[in] numberOfBytes The number of byte to read
\return true on success false if there is some missing bytes.
</member>
        <member name="M:RakNet.BitStream.Write(RakNet.BitStream*,System.UInt32)">
Write one bitstream to another
\param[in] numberOfBits bits to write
\param bitStream the bitstream to copy from
</member>
        <member name="M:RakNet.BitStream.Write(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst)">
Write an array or casted stream or raw data.  This does NOT do endian swapping.
\param[in] input a byte buffer
\param[in] numberOfBytes the size of \a input in bytes
</member>
        <member name="M:RakNet.BitStream.Read(RakNet.BitStream*,System.UInt32)">
Read one bitstream to another
\param[in] numberOfBits bits to read
\param bitStream the bitstream to read into from
</member>
        <member name="M:RakNet.BitStream.SerializeBits(System.Boolean,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)">
Bidirectional serialize/deserialize numberToSerialize bits to/from the input. Right aligned
data means in the case of a partial byte, the bits are aligned
from the right (bit 0) rather than the left (as in the normal
internal representation) You would set this to true when
writing user data, and false when copying bitstream data, such
as writing one bitstream to another
\param[in] writeToBitstream true to write from your data to this bitstream.  False to read from this bitstream and write to your data
\param[in] input The data
\param[in] numberOfBitsToSerialize The number of bits to write
\param[in] rightAlignedBits if true data will be right aligned
\return true if \a writeToBitstream is true.  true if \a writeToBitstream is false and the read was successful.  false if \a writeToBitstream is false and the read was not successful.
</member>
        <member name="M:RakNet.BitStream.Serialize(System.Boolean,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt32!System.Runtime.CompilerServices.IsConst)">
Bidirectional serialize/deserialize an array or casted stream or raw data.  This does NOT do endian swapping.
\param[in] writeToBitstream true to write from your data to this bitstream.  False to read from this bitstream and write to your data
\param[in] input a byte buffer
\param[in] numberOfBytes the size of \a input in bytes
\return true if \a writeToBitstream is true.  true if \a writeToBitstream is false and the read was successful.  false if \a writeToBitstream is false and the read was not successful.
</member>
        <member name="M:RakNet.BitStream.Reset">
Resets the bitstream for reuse.
</member>
        <member name="M:RakNet.BitStream.Dispose">
Destructor
</member>
        <member name="M:RakNet.BitStream.#ctor(System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Boolean)">
Initialize the BitStream, immediately setting the data it contains to a predefined pointer.
Set \a _copyData to true if you want to make an internal copy of the data you are passing. Set it to false to just save a pointer to the data.
You shouldn't call Write functions with \a _copyData as false, as this will write to unallocated memory
99% of the time you will use this function to cast Packet::data to a bitstream for reading, in which case you should write something as follows:
\code
RakNet::BitStream bs(packet-&gt;data, packet-&gt;length, false);
\endcode
\param[in] _data An array of bytes.
\param[in] lengthInBytes Size of the \a _data.
\param[in] _copyData true or false to make a copy of \a _data or not.
</member>
        <member name="M:RakNet.BitStream.#ctor(System.UInt32!System.Runtime.CompilerServices.IsConst)">
Create the bitstream, with some number of bytes to immediately allocate.
There is no benefit to calling this, unless you know exactly how many bytes you need and it is greater than BITSTREAM_STACK_ALLOCATION_SIZE.
In that case all it does is save you one or more realloc calls.
\param[in] initialBytesToAllocate the number of bytes to pre-allocate.
</member>
        <member name="M:RakNet.BitStream.#ctor">
Default Constructor
</member>
        <member name="T:RakNet.BitStream">
This class allows you to write and read native types as a string of bits.  BitStream is used extensively throughout RakNet and is designed to be used by users as well.
\sa BitStreamSample.txt
</member>
        <member name="F:RakNet.RakString.nPos">
Means undefined position
</member>
        <member name="F:RakNet.RakString.freeList">
\internal
List of free objects to reduce memory reallocations
</member>
        <member name="F:RakNet.RakString.emptyString">
\internal
</member>
        <member name="F:RakNet.RakString.sharedString">
\internal
</member>
        <member name="M:RakNet.RakString.#ctor(RakNet.RakString.SharedString*)">
\internal
</member>
        <member name="T:RakNet.RakString.SharedString">
\internal
</member>
        <member name="M:RakNet.RakString.GetSizeToAllocate(System.UInt32)">
\internal
</member>
        <member name="M:RakNet.RakString.DeserializeCompressed(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,RakNet.BitStream*,System.Boolean)">
Static version of the DeserializeCompressed() function
</member>
        <member name="M:RakNet.RakString.DeserializeCompressed(RakNet.BitStream*,System.Boolean)">
Deserialize compressed string, written by SerializeCompressed
\param[in] bs Bitstream to serialize from
\param[in] readLanguageId If true, looks for the variable langaugeId in the data stream. Must match what was passed to SerializeCompressed
\return true if the deserialization was successful
\pre StringCompressor::AddReference must have been called to instantiate the class (Happens automatically from RakPeer::Startup())
</member>
        <member name="M:RakNet.RakString.Deserialize(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,RakNet.BitStream*)">
Static version of the Deserialize() function
</member>
        <member name="M:RakNet.RakString.Deserialize(RakNet.BitStream*)">
Deserialize what was written by Serialize
\param[in] bs Bitstream to serialize from
\return true if the deserialization was successful
</member>
        <member name="M:RakNet.RakString.SerializeCompressed(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,RakNet.BitStream*,System.Int32,System.Boolean)">
Static version of the SerializeCompressed function
</member>
        <member name="M:RakNet.RakString.SerializeCompressed(RakNet.BitStream*,System.Int32,System.Boolean)">
Serialize to a bitstream, compressed (better bandwidth usage)
\param[out]  bs Bitstream to serialize to
\param[in] languageId languageId to pass to the StringCompressor class
\param[in] writeLanguageId encode the languageId variable in the stream. If false, 0 is assumed, and DeserializeCompressed will not look for this variable in the stream (saves bandwidth)
\pre StringCompressor::AddReference must have been called to instantiate the class (Happens automatically from RakPeer::Startup())
</member>
        <member name="M:RakNet.RakString.Serialize(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,RakNet.BitStream*)">
Static version of the Serialize function
</member>
        <member name="M:RakNet.RakString.Serialize(RakNet.BitStream*)">
Serialize to a bitstream, uncompressed (slightly faster)
\param[out] bs Bitstream to serialize to
</member>
        <member name="M:RakNet.RakString.FreeMemory">
RakString uses a freeList of old no-longer used strings
Call this function to clear this memory on shutdown
</member>
        <member name="M:RakNet.RakString.URLEncode">
URL Encode the string. See http://www.codeguru.com/cpp/cpp/cpp_mfc/article.php/c4029/
</member>
        <member name="M:RakNet.RakString.IsEmailAddress">
Is this a valid email address?
</member>
        <member name="M:RakNet.RakString.ContainsNonprintableExceptSpaces">
Does the string contain non-printable characters other than spaces?
</member>
        <member name="M:RakNet.RakString.IPAddressMatch(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Does the given IP address match the IP address encoded into this string, accounting for wildcards?
</member>
        <member name="M:RakNet.RakString.FPrintf(_iobuf*)">
Print the string to a file
</member>
        <member name="M:RakNet.RakString.Printf">
Print the string to the screen
</member>
        <member name="M:RakNet.RakString.Clear">
Clear the string
</member>
        <member name="M:RakNet.RakString.StrICmp(RakNet.RakString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Compare strings (not case sensitive)
</member>
        <member name="M:RakNet.RakString.StrCmp(RakNet.RakString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Compare strings (case sensitive)
</member>
        <member name="M:RakNet.RakString.Erase(System.UInt32,System.UInt32)">
Erase characters out of the string at index for count
</member>
        <member name="M:RakNet.RakString.SetChar(System.UInt32,RakNet.RakString)">
Replace character at index with string s
</member>
        <member name="M:RakNet.RakString.SetChar(System.UInt32,System.Byte)">
Replace character at index with c
</member>
        <member name="M:RakNet.RakString.Replace(System.UInt32,System.UInt32,System.Byte)">
Replace character(s) in starting at index, for count, with c
</member>
        <member name="M:RakNet.RakString.GetLength">
Returns the length of the string
</member>
        <member name="M:RakNet.RakString.IsEmpty">
Returns if the string is empty. Also, C_String() would return ""
</member>
        <member name="M:RakNet.RakString.Set(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
Set the value of the string
</member>
        <member name="M:RakNet.RakString.ToUpper">
Change all characters to uppercase
</member>
        <member name="M:RakNet.RakString.ToLower">
Change all characters to lowercase
</member>
        <member name="M:RakNet.RakString.op_Inequality(RakNet.RakString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Inequality
</member>
        <member name="M:RakNet.RakString.op_Equality(RakNet.RakString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Equality
</member>
        <member name="M:RakNet.RakString.op_Subscript(System.UInt32!System.Runtime.CompilerServices.IsConst)">
Character index. Do not use to change the string however.
</member>
        <member name="M:RakNet.RakString.op_AdditionAssignment(RakNet.RakString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Concatenation
</member>
        <member name="M:RakNet.RakString.op_Assign(RakNet.RakString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assigment operators
</member>
        <member name="M:RakNet.RakString.C_String">
Same as std::string::c_str
</member>
        <member name="M:RakNet.RakString.op_Implicit~System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*">
Implicit return of const char*
</member>
        <member name="M:RakNet.RakString.#ctor">
Constructors
</member>
        <member name="T:RakNet.RakString">
\brief String class
Has the following improvements over std::string
Reference counting: Suitable to store in lists
Varidic assignment operator
Doesn't cause linker errors
</member>
        <member name="M:StatisticsToString(RakNetStatistics*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.Int32)">
Verbosity level currently supports 0 (low), 1 (medium), 2 (high)
\param[in] s The Statistical information to format out
\param[in] buffer The buffer containing a formated report
\param[in] verbosityLevel 
0 low
1 medium 
2 high 
</member>
        <member name="F:RakNetStatistics.connectionStartTime">
 connection start time
</member>
        <member name="F:RakNetStatistics.bitsPerSecond">
 Current bits per second
</member>
        <member name="F:RakNetStatistics.internalOutputQueueSize">
 Number of messages in reliability output queue
</member>
        <member name="F:RakNetStatistics.messagesWaitingForReassembly">
 Number of messages waiting for reassembly
</member>
        <member name="F:RakNetStatistics.duplicateMessagesReceived">
 Number of data messages (anything other than an ack) received that are duplicate
</member>
        <member name="F:RakNetStatistics.invalidMessagesReceived">
 Number of data messages (anything other than an ack) received that are invalid
</member>
        <member name="F:RakNetStatistics.messagesReceived">
 Number of data messages (anything other than an ack) received that are valid and not duplicate
</member>
        <member name="F:RakNetStatistics.duplicateAcknowlegementsReceived">
 Number of acknowledgement messages received for packets we are not resending
</member>
        <member name="F:RakNetStatistics.acknowlegementsReceived">
 Number of acknowledgement messages received for packets we are resending
</member>
        <member name="F:RakNetStatistics.bitsWithBadCRCReceived">
 Bits with a bad CRC received
</member>
        <member name="F:RakNetStatistics.bitsReceived">
 Bits with a good CRC received
</member>
        <member name="F:RakNetStatistics.packetsWithBadCRCReceived">
 Packets with a bad CRC received
</member>
        <member name="F:RakNetStatistics.packetsReceived">
 Packets with a good CRC received
</member>
        <member name="F:RakNetStatistics.orderedMessagesInOrder">
 Number of ordered messages arrived in order
</member>
        <member name="F:RakNetStatistics.orderedMessagesOutOfOrder">
 Number of ordered messages arrived out of order
</member>
        <member name="F:RakNetStatistics.sequencedMessagesInOrder">
 Number of sequenced messages arrived in order
</member>
        <member name="F:RakNetStatistics.sequencedMessagesOutOfOrder">
 Number of sequenced messages arrived out of order
</member>
        <member name="F:RakNetStatistics.totalBitsSent">
 total bits sent
</member>
        <member name="F:RakNetStatistics.encryptionBitsSent">
 Number of bits added by encryption
</member>
        <member name="F:RakNetStatistics.packetsSent">
 Total packets sent
</member>
        <member name="F:RakNetStatistics.totalSplits">
 Total number of splits done for sending
</member>
        <member name="F:RakNetStatistics.numberOfSplitMessages">
 Number of messages split for sending
</member>
        <member name="F:RakNetStatistics.numberOfUnsplitMessages">
 Number of messages not split for sending
</member>
        <member name="F:RakNetStatistics.messagesOnResendQueue">
 Number of messages waiting for ack (// TODO - rename this)
</member>
        <member name="F:RakNetStatistics.messagesTotalBitsResent">
 Total number of bits resent, including headers
</member>
        <member name="F:RakNetStatistics.messageDataBitsResent">
 Number of bits resent of actual data
</member>
        <member name="F:RakNetStatistics.messageResends">
 Number of messages resent
</member>
        <member name="F:RakNetStatistics.packetsContainingOnlyAcknowlegementsAndResends">
 Number of packets containing only acknowledgments and resends
</member>
        <member name="F:RakNetStatistics.acknowlegementBitsSent">
 Number of acknowledgments bits sent
</member>
        <member name="F:RakNetStatistics.acknowlegementsPending">
 Number of acknowledgments waiting to be sent
</member>
        <member name="F:RakNetStatistics.acknowlegementsSent">
 Number of acknowledgments sent
</member>
        <member name="F:RakNetStatistics.packetsContainingOnlyAcknowlegements">
 Number of packets sent containing only acknowledgments
</member>
        <member name="F:RakNetStatistics.messageTotalBitsSent">
 Number of total bits used for user messages, including headers
</member>
        <member name="F:RakNetStatistics.messageDataBitsSent">
 Number of data bits used for user messages
</member>
        <member name="F:RakNetStatistics.messagesSent">
 Number of messages sent (high, medium, low priority)
</member>
        <member name="F:RakNetStatistics.messageSendBuffer">
 Number of Messages in the send Buffer (high, medium, low priority)
</member>
        <member name="T:RakNetStatistics">
\file
\brief A structure that holds all statistical data returned by RakNet.

This file is part of RakNet Copyright 2003 Kevin Jenkins.

Usage of RakNet is subject to the appropriate license agreement.
Creative Commons Licensees are subject to the
license found at
http://creativecommons.org/licenses/by-nc/2.5/
Single application licensees are subject to the license found at
http://www.jenkinssoftware.com/SingleApplicationLicense.html
Custom license users are subject to the terms therein.
GPL license users are subject to the GNU General Public
License as published by the Free
Software Foundation; either version 2 of the License, or (at your
option) any later version.
\file
\brief This file contains enumerations for packet priority and reliability enumerations.

This file is part of RakNet Copyright 2003 Kevin Jenkins.

Usage of RakNet is subject to the appropriate license agreement.
Creative Commons Licensees are subject to the
license found at
http://creativecommons.org/licenses/by-nc/2.5/
Single application licensees are subject to the license found at
http://www.jenkinssoftware.com/SingleApplicationLicense.html
Custom license users are subject to the terms therein.
GPL license users are subject to the GNU General Public
License as published by the Free
Software Foundation; either version 2 of the License, or (at your
option) any later version.
\file
\brief Types used by RakNet, most of which involve user code.

This file is part of RakNet Copyright 2003 Kevin Jenkins.

Usage of RakNet is subject to the appropriate license agreement.
Creative Commons Licensees are subject to the
license found at
http://creativecommons.org/licenses/by-nc/2.5/
Single application licensees are subject to the license found at
http://www.jenkinssoftware.com/SingleApplicationLicense.html
Custom license users are subject to the terms therein.
GPL license users are subject to the GNU General Public
License as published by the Free
Software Foundation; either version 2 of the License, or (at your
option) any later version.
\brief Network Statisics Usage 

Store Statistics information related to network usage 
</member>
        <member name="M:RakPeerInterface.SendOutOfBand(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt16,System.Byte,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.UInt32)">
\internal
</member>
        <member name="M:RakPeerInterface.GetRPCString(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst,SystemAddress!System.Runtime.CompilerServices.IsConst)">
\internal
</member>
        <member name="M:RakPeerInterface.GetStatistics(SystemAddress!System.Runtime.CompilerServices.IsConst)">
Returns a structure containing a large set of network statistics for the specified system.
You can map this data to a string using the C style StatisticsToString() function
\param[in] systemAddress: Which connected system to get statistics for
\return 0 on can't find the specified system.  A pointer to a set of data otherwise.
\sa RakNetStatistics.h
</member>
        <member name="M:RakPeerInterface.IsNetworkSimulatorActive">
Returns if you previously called ApplyNetworkSimulator
\return If you previously called ApplyNetworkSimulator
</member>
        <member name="M:RakPeerInterface.SetPerConnectionOutgoingBandwidthLimit(System.UInt32)">
Limits how much outgoing bandwidth can be sent per-connection.
This limit does not apply to the sum of all connections!
Exceeding the limit queues up outgoing traffic
\param[in] maxBitsPerSecond Maximum bits per second to send.  Use 0 for unlimited (default). Once set, it takes effect immedately and persists until called again.
</member>
        <member name="M:RakPeerInterface.ApplyNetworkSimulator(System.Double,System.UInt16,System.UInt16)">
Adds simulated ping and packet loss to the outgoing data flow.
To simulate bi-directional ping and packet loss, you should call this on both the sender and the recipient, with half the total ping and maxSendBPS value on each.
You can exclude network simulator code with the _RELEASE #define to decrease code size
\depreciated Use http://www.jenkinssoftware.com/raknet/forum/index.php?topic=1671.0 instead.
\param[in] maxSendBPS Maximum bits per second to send.  Packetloss grows linearly.  0 to disable. (CURRENTLY BROKEN - ALWAYS DISABLED)
\param[in] minExtraPing The minimum time to delay sends.
\param[in] extraPingVariance The additional random time to delay sends.
</member>
        <member name="M:RakPeerInterface.AllocatePacket(System.UInt32)">
\Returns a packet for you to write to if you want to create a Packet for some reason.
You can add it to the receive buffer with PushBackPacket
\param[in] dataSize How many bytes to allocate for the buffer
\return A packet you can write to
</member>
        <member name="M:RakPeerInterface.RemoveRouterInterface(RouterInterface*)">
\Internal
</member>
        <member name="M:RakPeerInterface.SetRouterInterface(RouterInterface*)">
\Internal
</member>
        <member name="M:RakPeerInterface.PushBackPacket(Packet*,System.Boolean)">
Put a message back at the end of the receive queue in case you don't want to deal with it immediately
\param[in] packet The packet you want to push back.
\param[in] pushAtHead True to push the packet so that the next receive call returns it.  False to push it at the end of the queue (obviously pushing it at the end makes the packets out of order)
</member>
        <member name="M:RakPeerInterface.DetachPlugin(PluginInterface*)">
Detaches a Plugin interface to run code automatically on message receipt
\param[in] messageHandler Pointer to a plugin to detach
</member>
        <member name="M:RakPeerInterface.AttachPlugin(PluginInterface*)">
Attatches a Plugin interface to run code automatically on message receipt in the Receive call
\note If plugins have dependencies on each other then the order does matter - for example the router plugin should go first because it might route messages for other plugins
\param[in] messageHandler Pointer to a plugin to attach
</member>
        <member name="M:RakPeerInterface.GetDecompressionRatio">
Returns the decompression ratio.  A high decompression ratio is good.  Decompression is for incoming data
\return The decompression ratio
</member>
        <member name="M:RakPeerInterface.GetCompressionRatio">
Returns the compression ratio. A low compression ratio is good.  Compression is for outgoing data
\return The compression ratio
</member>
        <member name="M:RakPeerInterface.DeleteCompressionLayer(System.Boolean)">
Delete the output or input layer as specified.  This is not necessary to call and is only valuable for freeing memory.
\pre You should only call this when disconnected
\param[in] inputLayer True to mean the inputLayer, false to mean the output layer
\return false (failure) if connected.  Otherwise true (success)
</member>
        <member name="M:RakPeerInterface.GenerateCompressionLayer(System.UInt32*,System.Boolean)">
This is an optional function to generate the compression layer based on the input frequency table.
If you want to use it you should call this twice - once with inputLayer as true and once as false.
The frequency table passed here with inputLayer=true should match the frequency table on the recipient with inputLayer=false.
Likewise, the frequency table passed here with inputLayer=false should match the frequency table on the recipient with inputLayer=true.
Calling this function when there is an existing layer will overwrite the old layer.
\pre You should only call this when disconnected
\param[in] inputFrequencyTable A frequency table for your data
\param[in] inputLayer Is this the input layer?
\return false (failure) if connected.  Otherwise true (success)
\sa Compression.cpp
</member>
        <member name="M:RakPeerInterface.GetOutgoingFrequencyTable(System.UInt32*)">
Returns the frequency of outgoing bytes into output frequency table
The purpose is to save to file as either a master frequency table from a sample game session for passing to
GenerateCompressionLayer() 
\pre You should only call this when disconnected. Requires that you first enable data frequency tracking by calling SetCompileFrequencyTable(true)
\param[out] outputFrequencyTable  The frequency of each corresponding byte
\return False (failure) if connected or if frequency table tracking is not enabled. Otherwise true (success)
</member>
        <member name="M:RakPeerInterface.SetCompileFrequencyTable(System.Boolean)">
Enables or disables frequency table tracking.  This is required to get a frequency table, which is used in GenerateCompressionLayer()
This value persists between connect calls and defaults to false (no frequency tracking)
\pre You can call this at any time - however you SHOULD only call it when disconnected.  Otherwise you will only trackpart of the values sent over the network.
\param[in] doCompile True to enable tracking 
</member>
        <member name="M:RakPeerInterface.SendTTL(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt16,System.Int32,System.UInt32)">
Send a message to host, with the IP socket option TTL set to 3
This message will not reach the host, but will open the router.
Used for NAT-Punchthrough
</member>
        <member name="M:RakPeerInterface.SetUnreliableTimeout(System.UInt32)">
Set how long to wait before giving up on sending an unreliable message
Useful if the network is clogged up.
Set to 0 or less to never timeout.  Defaults to 0.
\param[in] timeoutMS How many ms to wait before simply not sending an unreliable message.
</member>
        <member name="M:RakPeerInterface.GetSplitMessageProgressInterval">
Returns what was passed to SetSplitMessageProgressInterval()
\return What was passed to SetSplitMessageProgressInterval(). Default to 0.
</member>
        <member name="M:RakPeerInterface.SetSplitMessageProgressInterval(System.Int32)">
Controls how often to return ID_DOWNLOAD_PROGRESS for large message downloads.
ID_DOWNLOAD_PROGRESS is returned to indicate a new partial message chunk, roughly the MTU size, has arrived
As it can be slow or cumbersome to get this notification for every chunk, you can set the interval at which it is returned.
Defaults to 0 (never return this notification)
\param[in] interval How many messages to use as an interval
</member>
        <member name="M:RakPeerInterface.AdvertiseSystem(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt16,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.UInt32)">
Sends a one byte message ID_ADVERTISE_SYSTEM to the remote unconnected system.
This will tell the remote system our external IP outside the LAN along with some user data.
\pre The sender and recipient must already be started via a successful call to Initialize
\param[in] host Either a dotted IP address or a domain name
\param[in] remotePort Which port to connect to on the remote machine.
\param[in] data Optional data to append to the packet.
\param[in] dataLength length of data in bytes.  Use 0 if no data.
\param[in] connectionSocketIndex Index into the array of socket descriptors passed to socketDescriptors in RakPeer::Startup() to send on.
\return false if IsActive()==false or the host is unresolvable. True otherwise
</member>
        <member name="M:RakPeerInterface.AllowConnectionResponseIPMigration(System.Boolean)">
Allow or disallow connection responses from any IP. Normally this should be false, but may be necessary
when connecting to servers with multiple IP addresses.
\param[in] allow - True to allow this behavior, false to not allow. Defaults to false. Value persists between connections
</member>
        <member name="M:RakPeerInterface.IsLocalIP(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Is this a local IP?
\param[in] An IP address to check, excluding the port
\return True if this is one of the IP addresses returned by GetLocalIP
</member>
        <member name="M:RakPeerInterface.GetLocalIP(System.UInt32)">
Returns an IP address at index 0 to GetNumberOfAddresses-1
\param[in] index index into the list of IP addresses
\return The local IP address at this index
</member>
        <member name="M:RakPeerInterface.GetNumberOfAddresses">
Returns the number of IP addresses this system has internally. Get the actual addresses from GetLocalIP()
</member>
        <member name="M:RakPeerInterface.GetMTUSize(SystemAddress!System.Runtime.CompilerServices.IsConst)">
Returns the current MTU size
\param[in] target Which system to get this for.  UNASSIGNED_SYSTEM_ADDRESS to get the default
\return The current MTU size
</member>
        <member name="M:RakPeerInterface.SetMTUSize(System.Int32,SystemAddress!System.Runtime.CompilerServices.IsConst)">
Set the MTU per datagram.  It's important to set this correctly - otherwise packets will be needlessly split, decreasing performance and throughput.
Maximum allowed size is MAXIMUM_MTU_SIZE.
Too high of a value will cause packets not to arrive at worst and be fragmented at best.
Too low of a value will split packets unnecessarily.
Recommended size is 1500
sa MTUSize.h
\param[in] size The MTU size
\param[in] target Which system to set this for.  UNASSIGNED_SYSTEM_ADDRESS to set the default, for new systems
\pre Can only be called when not connected.
\return false on failure (we are connected), else true
</member>
        <member name="M:RakPeerInterface.SetTimeoutTime(System.UInt32,SystemAddress!System.Runtime.CompilerServices.IsConst)">
Set the time, in MS, to use before considering ourselves disconnected after not being able to deliver a reliable message.
Default time is 10,000 or 10 seconds in release and 30,000 or 30 seconds in debug.
\param[in] timeMS Time, in MS
\param[in] target Which system to do this for. Pass UNASSIGNED_SYSTEM_ADDRESS for all systems.
</member>
        <member name="M:RakPeerInterface.GetSystemAddressFromGuid(RakNetGUID!System.Runtime.CompilerServices.IsConst)">
Given the GUID of a connected system, give us the system address of that system.
The GUID will be the same on all systems connected to that instance of RakPeer, even if the external system addresses are different
Currently O(log(n)), but this may be improved in the future. If you use this frequently, you may want to cache the value as it won't change.
If \a input is UNASSIGNED_RAKNET_GUID, will return UNASSIGNED_SYSTEM_ADDRESS
\param[in] input The RakNetGUID of the system we are checking to see if we are connected to
</member>
        <member name="M:RakPeerInterface.GetGuidFromSystemAddress(SystemAddress!System.Runtime.CompilerServices.IsConst)">
Given a connected system, give us the unique GUID representing that instance of RakPeer.
This will be the same on all systems connected to that instance of RakPeer, even if the external system addresses are different
Currently O(log(n)), but this may be improved in the future. If you use this frequently, you may want to cache the value as it won't change.
If \a input is UNASSIGNED_SYSTEM_ADDRESS, will return your own GUID
\pre Call Startup() first, or the function will return UNASSIGNED_RAKNET_GUID
\param[in] input The system address of the system we are connected to
</member>
        <member name="M:RakPeerInterface.GetExternalID(SystemAddress!System.Runtime.CompilerServices.IsConst)">
Return the unique address identifier that represents you on the the network and is based on your externalIP / port
(the IP / port the specified player uses to communicate with you)
\param[in] target Which remote system you are referring to for your external ID.  Usually the same for all systems, unless you have two or more network cards.
</member>
        <member name="M:RakPeerInterface.GetInternalID(SystemAddress!System.Runtime.CompilerServices.IsConst)">
Return the unique address identifier that represents you on the the network and is based on your local IP / port.
\return the identifier of your system internally, which may not be how other systems see if you if you are behind a NAT or proxy
</member>
        <member name="M:RakPeerInterface.GetOfflinePingResponse(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**,System.UInt32*)">
Returns pointers to a copy of the data passed to SetOfflinePingResponse
\param[out] data A pointer to a copy of the data passed to \a SetOfflinePingResponse()
\param[out] length A pointer filled in with the length parameter passed to SetOfflinePingResponse()
\sa SetOfflinePingResponse
</member>
        <member name="M:RakPeerInterface.SetOfflinePingResponse(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst)">
Sets the data to send along with a LAN server discovery or offline ping reply.
\a length should be under 400 bytes, as a security measure against flood attacks
\param[in] data a block of data to store, or 0 for none
\param[in] length The length of data in bytes, or 0 for none
\sa Ping.cpp
</member>
        <member name="M:RakPeerInterface.SetOccasionalPing(System.Boolean)">
Ping the remote systems every so often, or not. This is off by default.  Can be called anytime.
\param[in] doPing True to start occasional pings.  False to stop them.
</member>
        <member name="M:RakPeerInterface.GetLowestPing(SystemAddress!System.Runtime.CompilerServices.IsConst)">
Returns the lowest ping time read or -1 if none read yet
\param[in] systemAddress Which system we are referring to
\return The lowest ping time for this system, or -1
</member>
        <member name="M:RakPeerInterface.GetLastPing(SystemAddress!System.Runtime.CompilerServices.IsConst)">
Returns the last ping time read for the specific system or -1 if none read yet
\param[in] systemAddress Which system we are referring to
\return The last ping time for this system, or -1
</member>
        <member name="M:RakPeerInterface.GetAveragePing(SystemAddress!System.Runtime.CompilerServices.IsConst)">
Returns the average of all ping times read for the specific system or -1 if none read yet
\param[in] systemAddress Which system we are referring to
\return The ping time for this system, or -1
</member>
        <member name="M:RakPeerInterface.Ping(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt16,System.Boolean,System.UInt32)">
Send a ping to the specified unconnected system. The remote system, if it is Initialized, will respond with ID_PONG followed by sizeof(RakNetTime) containing the system time the ping was sent.(Default is 4 bytes - See __GET_TIME_64BIT in RakNetTypes.h
\param[in] host Either a dotted IP address or a domain name.  Can be 255.255.255.255 for LAN broadcast.
\param[in] remotePort Which port to connect to on the remote machine.
\param[in] onlyReplyOnAcceptingConnections Only request a reply if the remote system is accepting connections
\param[in] connectionSocketIndex Index into the array of socket descriptors passed to socketDescriptors in RakPeer::Startup() to send on.
\return true on success, false on failure (unknown hostname)
</member>
        <member name="M:RakPeerInterface.Ping(SystemAddress!System.Runtime.CompilerServices.IsConst)">
Send a ping to the specified connected system.
\pre The sender and recipient must already be started via a successful call to Startup()
\param[in] target Which system to ping
</member>
        <member name="M:RakPeerInterface.IsBanned(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Returns true or false indicating if a particular IP is banned.
\param[in] IP - Dotted IP address.
\return true if IP matches any IPs in the ban list, accounting for any wildcards. False otherwise.
</member>
        <member name="M:RakPeerInterface.ClearBanList">
Allows all previously banned IPs to connect.
</member>
        <member name="M:RakPeerInterface.RemoveFromBanList(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Allows a previously banned IP to connect. 
param[in] Dotted IP address. Can use * as a wildcard, such as 128.0.0.* will banAll IP addresses starting with 128.0.0
</member>
        <member name="M:RakPeerInterface.AddToBanList(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
Bans an IP from connecting.  Banned IPs persist between connections but are not saved on shutdown nor loaded on startup.
param[in] IP Dotted IP address. Can use * as a wildcard, such as 128.0.0.* will ban all IP addresses starting with 128.0.0
\param[in] milliseconds how many ms for a temporary ban.  Use 0 for a permanent ban
</member>
        <member name="M:RakPeerInterface.GetSystemAddressFromIndex(System.Int32)">
This function is only useful for looping through all systems
Given an index, will return a SystemAddress.
\param[in] index Index should range between 0 and the maximum number of players allowed - 1.
\return The SystemAddress
</member>
        <member name="M:RakPeerInterface.GetIndexFromSystemAddress(SystemAddress!System.Runtime.CompilerServices.IsConst)">
Given a systemAddress, returns an index from 0 to the maximum number of players allowed - 1.
\param[in] systemAddress The SystemAddress we are referring to
\return The index of this SystemAddress or -1 on system not found.
</member>
        <member name="M:RakPeerInterface.IsConnected(SystemAddress!System.Runtime.CompilerServices.IsConst,System.Boolean,System.Boolean)">
Returns if a particular systemAddress is connected to us (this also returns true if we are in the process of connecting)
\param[in] systemAddress The SystemAddress we are referring to
\param[in] includeInProgress If true, also return true for connections that are in progress but haven't completed
\param[in] includeDisconnecting If true, also return true for connections that are in the process of disconnecting
\return True if this system is connected and active, false otherwise.
</member>
        <member name="M:RakPeerInterface.CloseConnection(SystemAddress!System.Runtime.CompilerServices.IsConst,System.Boolean,System.Byte)">
Close the connection to another host (if we initiated the connection it will disconnect, if they did it will kick them out).
\param[in] target Which system to close the connection to.
\param[in] sendDisconnectionNotification True to send ID_DISCONNECTION_NOTIFICATION to the recipient.  False to close it silently.
\param[in] channel Which ordering channel to send the disconnection notification on, if any
</member>
        <member name="M:RakPeerInterface.RPC(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,RakNet.BitStream!System.Runtime.CompilerServices.IsConst*,PacketPriority,PacketReliability,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,SystemAddress,System.Boolean,System.UInt32*,NetworkID,RakNet.BitStream*)">
\ingroup RAKNET_RPC
Calls a C function on the remote system that was already registered using RegisterAsRemoteProcedureCall.
If you want that function to return data you should call RPC from that system in the same wayReturns true on a successful packet
send (this does not indicate the recipient performed the call), false on failure
\param[in] uniqueID A NULL terminated string identifying the function to call.  Recommended you use the macro CLASS_MEMBER_ID for class member functions.
\param[in] data The data to send
\param[in] bitLength The number of bits of \a data
\param[in] priority What priority level to send on. See PacketPriority.h.
\param[in] reliability How reliability to send this data. See PacketPriority.h.
\param[in] orderingChannel When using ordered or sequenced message, what channel to order these on.
\param[in] systemAddress Who to send this message to, or in the case of broadcasting who not to send it to.  Use UNASSIGNED_SYSTEM_ADDRESS to specify none
\param[in] broadcast True to send this packet to all connected systems. If true, then systemAddress specifies who not to send the packet to.
\param[in] includedTimestamp Pass a timestamp if you wish, to be adjusted in the usual fashion as per ID_TIMESTAMP.  Pass 0 to not include a timestamp.
\param[in] networkID For static functions, pass UNASSIGNED_NETWORK_ID.  For member functions, you must derive from NetworkIDObject and pass the value returned by NetworkIDObject::GetNetworkID for that object.
\param[in] replyFromTarget If 0, this function is non-blocking.  Otherwise it will block while waiting for a reply from the target procedure, which should be remotely written to RPCParameters::replyToSender and copied to replyFromTarget.  The block will return early on disconnect or if the sent packet is unreliable and more than 3X the ping has elapsed.
\return True on a successful packet send (this does not indicate the recipient performed the call), false on failure
</member>
        <member name="M:RakPeerInterface.RPC(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,PacketPriority,PacketReliability,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,SystemAddress,System.Boolean,System.UInt32*,NetworkID,RakNet.BitStream*)">
\ingroup RAKNET_RPC
Calls a C function on the remote system that was already registered using RegisterAsRemoteProcedureCall().
\param[in] uniqueID A NULL terminated string identifying the function to call.  Recommended you use the macro CLASS_MEMBER_ID for class member functions.
\param[in] data The data to send
\param[in] bitLength The number of bits of \a data
\param[in] priority What priority level to send on. See PacketPriority.h.
\param[in] reliability How reliability to send this data. See PacketPriority.h.
\param[in] orderingChannel When using ordered or sequenced message, what channel to order these on.
\param[in] systemAddress Who to send this message to, or in the case of broadcasting who not to send it to.  Use UNASSIGNED_SYSTEM_ADDRESS to specify none
\param[in] broadcast True to send this packet to all connected systems. If true, then systemAddress specifies who not to send the packet to.
\param[in] includedTimestamp Pass a timestamp if you wish, to be adjusted in the usual fashion as per ID_TIMESTAMP.  Pass 0 to not include a timestamp.
\param[in] networkID For static functions, pass UNASSIGNED_NETWORK_ID.  For member functions, you must derive from NetworkIDObject and pass the value returned by NetworkIDObject::GetNetworkID for that object.
\param[in] replyFromTarget If 0, this function is non-blocking.  Otherwise it will block while waiting for a reply from the target procedure, which should be remotely written to RPCParameters::replyToSender and copied to replyFromTarget.  The block will return early on disconnect or if the sent packet is unreliable and more than 3X the ping has elapsed.
\return True on a successful packet send (this does not indicate the recipient performed the call), false on failure
</member>
        <member name="M:RakPeerInterface.GetNetworkIDManager">
\return Returns the value passed to SetNetworkIDManager or 0 if never called.
</member>
        <member name="M:RakPeerInterface.SetNetworkIDManager(NetworkIDManager*)">
\ingroup RAKNET_RPC
Used by Object member RPC to lookup objects given that object's ID
Also used by the ReplicaManager plugin
\param[in] An instance of NetworkIDManager to use for the lookup.
</member>
        <member name="M:RakPeerInterface.UnregisterAsRemoteProcedureCall(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\ingroup RAKNET_RPC
\depreciated Use the AutoRPC plugin instead
Unregisters a C function as available for calling as a remote procedure call that was formerly registered with RegisterAsRemoteProcedureCall. Only call offline.
\param[in] uniqueID A string of only letters to identify this procedure.  Recommended you use the macro CLASS_MEMBER_ID for class member functions.
</member>
        <member name="M:RakPeerInterface.RegisterClassMemberRPC(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Void*)">
\ingroup RAKNET_RPC
\depreciated Use the AutoRPC plugin instead
Register a C++ member function as available for calling as a remote procedure call.
\param[in] uniqueID A null terminated string to identify this procedure. Recommended you use the macro REGISTER_CLASS_MEMBER_RPC to create the string.  Use RegisterAsRemoteProcedureCall() for static functions.
\param[in] functionPointer The name of the function to be used as a function pointer. This can be called whether active or not, and registered functions stay registered unless unregistered with UnregisterAsRemoteProcedureCall
\sa The sample ObjectMemberRPC.cpp
</member>
        <member name="M:RakPeerInterface.RegisterAsRemoteProcedureCall(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:System.Void(RPCParameters*))">
\ingroup RAKNET_RPC
\depreciated Use the AutoRPC plugin instead
Register a C or static member function as available for calling as a remote procedure call
\param[in] uniqueID A null-terminated unique string to identify this procedure.  See RegisterClassMemberRPC() for class member functions.
\param[in] functionPointer(...) The name of the function to be used as a function pointer. This can be called whether active or not, and registered functions stay registered unless unregistered
</member>
        <member name="M:RakPeerInterface.GetMaximumNumberOfPeers">
Return the total number of connections we are allowed
</member>
        <member name="M:RakPeerInterface.DeallocatePacket(Packet*)">
Call this to deallocate a message returned by Receive() when you are done handling it.
\param[in] packet The message to deallocate.	
</member>
        <member name="M:RakPeerInterface.Receive">
Gets a message from the incoming message queue.
Use DeallocatePacket() to deallocate the message after you are done with it.
User-thread functions, such as RPC calls and the plugin function PluginInterface::Update occur here.
\return 0 if no packets are waiting to be handled, otherwise a pointer to a packet.
\note COMMON MISTAKE: Be sure to call this in a loop, once per game tick, until it returns 0. If you only process one packet per game tick they will buffer up.
sa RakNetTypes.h contains struct Packet
</member>
        <member name="M:RakPeerInterface.Send(RakNet.BitStream!System.Runtime.CompilerServices.IsConst*,PacketPriority,PacketReliability,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,SystemAddress,System.Boolean)">
Sends a block of data to the specified system that you are connected to.  Same as the above version, but takes a BitStream as input.
\param[in] bitStream The bitstream to send
\param[in] priority What priority level to send on.  See PacketPriority.h
\param[in] reliability How reliability to send this data.  See PacketPriority.h
\param[in] orderingChannel When using ordered or sequenced messages, what channel to order these on. Messages are only ordered relative to other messages on the same stream
\param[in] systemAddress Who to send this packet to, or in the case of broadcasting who not to send it to.  Use UNASSIGNED_SYSTEM_ADDRESS to specify none
\param[in] broadcast True to send this packet to all connected systems. If true, then systemAddress specifies who not to send the packet to.
\return False if we are not connected to the specified recipient.  True otherwise
\note COMMON MISTAKE: When writing the first byte, bitStream-&gt;Write((unsigned char) ID_MY_TYPE) be sure it is casted to a byte, and you are not writing a 4 byte enumeration.
</member>
        <member name="M:RakPeerInterface.SendLoopback(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst)">
"Send" to yourself rather than a remote system. The message will be processed through the plugins and returned to the game as usual
This function works anytime
The first byte should be a message identifier starting at ID_USER_PACKET_ENUM
\param[in] data The block of data to send
\param[in] length The size in bytes of the data to send
</member>
        <member name="M:RakPeerInterface.Send(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst,PacketPriority,PacketReliability,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,SystemAddress,System.Boolean)">
Sends a block of data to the specified system that you are connected to.
This function only works while the connected
The first byte should be a message identifier starting at ID_USER_PACKET_ENUM
\param[in] data The block of data to send
\param[in] length The size in bytes of the data to send
\param[in] priority What priority level to send on.  See PacketPriority.h
\param[in] reliability How reliability to send this data.  See PacketPriority.h
\param[in] orderingChannel When using ordered or sequenced messages, what channel to order these on. Messages are only ordered relative to other messages on the same stream
\param[in] systemAddress Who to send this packet to, or in the case of broadcasting who not to send it to.  Use UNASSIGNED_SYSTEM_ADDRESS to specify none
\param[in] broadcast True to send this packet to all connected systems. If true, then systemAddress specifies who not to send the packet to.
\return False if we are not connected to the specified recipient.  True otherwise
</member>
        <member name="M:RakPeerInterface.GetConnectionList(SystemAddress*,System.UInt16*)">
Fills the array remoteSystems with the SystemAddress of all the systems we are connected to
\param[out] remoteSystems An array of SystemAddress structures to be filled with the SystemAddresss of the systems we are connected to. Pass 0 to remoteSystems to only get the number of systems we are connected to
\param[in, out] numberOfSystems As input, the size of remoteSystems array.  As output, the number of elements put into the array 
</member>
        <member name="M:RakPeerInterface.IsActive">
Returns if the network thread is running
\return true if the network thread is running, false otherwise
</member>
        <member name="M:RakPeerInterface.Shutdown(System.UInt32,System.Byte)">
\brief Connect to the specified network ID (Platform specific console function)
Does built-in NAt traversal
\param[in] passwordData A data block that must match the data block on the server passed to SetIncomingPassword.  This can be a string or can be a stream of data.  Use 0 for no password.
\param[in] passwordDataLength The length in bytes of passwordData
\brief Stops the network threads and closes all connections.
\param[in] blockDuration How long, in milliseconds, you should wait for all remaining messages to go out, including ID_DISCONNECTION_NOTIFICATION.  If 0, it doesn't wait at all.
\param[in] orderingChannel If blockDuration &gt; 0, ID_DISCONNECTION_NOTIFICATION will be sent on this channel
If you set it to 0 then the disconnection notification won't be sent
</member>
        <member name="M:RakPeerInterface.Connect(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt16,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.UInt32)">
\brief Connect to the specified host (ip or domain name) and server port.
Calling Connect and not calling SetMaximumIncomingConnections acts as a dedicated client.
Calling both acts as a true peer. This is a non-blocking connection.
You know the connection is successful when IsConnected() returns true or Receive() gets a message with the type identifier ID_CONNECTION_ACCEPTED.
If the connection is not successful, such as a rejected connection or no response then neither of these things will happen.
\pre Requires that you first call Initialize
\param[in] host Either a dotted IP address or a domain name
\param[in] remotePort Which port to connect to on the remote machine.
\param[in] passwordData A data block that must match the data block on the server passed to SetIncomingPassword.  This can be a string or can be a stream of data.  Use 0 for no password.
\param[in] passwordDataLength The length in bytes of passwordData
\param[in] connectionSocketIndex Index into the array of socket descriptors passed to socketDescriptors in RakPeer::Startup() to send on.
\return True on successful initiation. False on incorrect parameters, internal error, or too many existing peers.  Returning true does not mean you connected!
</member>
        <member name="M:RakPeerInterface.GetIncomingPassword(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.Int32*)">
Gets the password passed to SetIncomingPassword
\param[out] passwordData  Should point to a block large enough to hold the password data you passed to SetIncomingPassword()
\param[in,out] passwordDataLength Maximum size of the array passwordData.  Modified to hold the number of bytes actually written
</member>
        <member name="M:RakPeerInterface.SetIncomingPassword(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
Sets the password incoming connections must match in the call to Connect (defaults to none). Pass 0 to passwordData to specify no password
This is a way to set a low level password for all incoming connections.  To selectively reject connections, implement your own scheme using CloseConnection() to remove unwanted connections
\param[in] passwordData A data block that incoming connections must match.  This can be just a password, or can be a stream of data. Specify 0 for no password data
\param[in] passwordDataLength The length in bytes of passwordData
</member>
        <member name="M:RakPeerInterface.NumberOfConnections">
Returns how many open connections there are at this time
\return the number of open connections
</member>
        <member name="M:RakPeerInterface.SetMaximumIncomingConnections(System.UInt16)">
Sets how many incoming connections are allowed. If this is less than the number of players currently connected,
no more players will be allowed to connect.  If this is greater than the maximum number of peers allowed,
it will be reduced to the maximum number of peers allowed.
Defaults to 0, meaning by default, nobody can connect to you
\param[in] numberAllowed Maximum number of incoming connections allowed.
</member>
        <member name="M:RakPeerInterface.IsInSecurityExceptionList(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Checks to see if a given IP is in the security exception list
\param[in] IP address to check.
</member>
        <member name="M:RakPeerInterface.RemoveFromSecurityExceptionList(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Remove a specific connection previously added via AddToSecurityExceptionList
\param[in] ip IP address to remove. Pass 0 to remove all IP addresses. * wildcards are supported.
</member>
        <member name="M:RakPeerInterface.AddToSecurityExceptionList(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
If secure connections are on, do not use secure connections for a specific IP address.
This is useful if you have a fixed-address internal server behind a LAN.
\note Secure connections are determined by the recipient of an incoming connection. This has no effect if called on the system attempting to connect.
\param[in] ip IP address to add. * wildcards are supported.
</member>
        <member name="M:RakPeerInterface.DisableSecurity">
Disables all security.
\note Must be called while offline
</member>
        <member name="M:RakPeerInterface.InitializeSecurity(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Secures connections though a combination of SHA1, AES128, SYN Cookies, and RSA to prevent connection spoofing, replay attacks, data eavesdropping, packet tampering, and MitM attacks.
There is a significant amount of processing and a slight amount of bandwidth overhead for this feature.
If you accept connections, you must call this or else secure connections will not be enabled for incoming connections.
If you are connecting to another system, you can call this with values for the (e and p,q) public keys before connecting to prevent MitM
\pre Must be called while offline
\param[in] pubKeyE A pointer to the public keys from the RSACrypt class.  
\param[in] pubKeyN A pointer to the public keys from the RSACrypt class. 
\param[in] privKeyP Public key generated from the RSACrypt class.  
\param[in] privKeyQ Public key generated from the RSACrypt class.  If the private keys are 0, then a new key will be generated when this function is called@see the Encryption sample
</member>
        <member name="M:RakPeerInterface.Startup(System.UInt16,System.Int32,SocketDescriptor*,System.UInt32)">
\brief Starts the network threads, opens the listen port.
You must call this before calling Connect().
Multiple calls while already active are ignored.  To call this function again with different settings, you must first call Shutdown().
\note Call SetMaximumIncomingConnections if you want to accept incoming connections
\note Set _RAKNET_THREADSAFE in RakNetDefines.h if you want to call RakNet functions from multiple threads (not recommended, as it is much slower and RakNet is already asynchronous).
\param[in] maxConnections The maximum number of connections between this instance of RakPeer and another instance of RakPeer. Required so the network can preallocate and for thread safety. A pure client would set this to 1.  A pure server would set it to the number of allowed clients.- A hybrid would set it to the sum of both types of connections
\param[in] localPort The port to listen for connections on.
\param[in] _threadSleepTimer How many ms to Sleep each internal update cycle (30 to give the game priority, 0 for regular (recommended)
\param[in] socketDescriptors An array of SocketDescriptor structures to force RakNet to listen on a particular IP address or port (or both).  Each SocketDescriptor will represent one unique socket.  Do not pass redundant structures.  To listen on a specific port, you can pass SocketDescriptor(myPort,0); such as for a server.  For a client, it is usually OK to just pass SocketDescriptor();
\param[in] socketDescriptorCount The size of the \a socketDescriptors array.  Pass 1 if you are not sure what to pass.
\return False on failure (can't create socket or thread), true on success.
</member>
        <member name="M:RakPeerInterface.Dispose">
Destructor
</member>
        <member name="F:UNASSIGNED_NETWORK_ID">
Unassigned object ID
</member>
        <member name="F:Packet.deleteData">
@internal
Indicates whether to delete the data, or to simply delete the packet.
</member>
        <member name="F:Packet.data">
The data from the sender
</member>
        <member name="F:Packet.bitSize">
The length of the data in bits
</member>
        <member name="F:Packet.length">
The length of the data in bytes
\deprecated You should use bitSize.
</member>
        <member name="F:Packet.guid">
A unique identifier for the system that sent this packet, regardless of IP address (internal / external / remote system)
Only valid once a connection has been established (ID_CONNECTION_REQUEST_ACCEPTED, or ID_NEW_INCOMING_CONNECTION)
Until that time, will be UNASSIGNED_RAKNET_GUID
</member>
        <member name="F:Packet.systemAddress">
The system that send this packet.
</member>
        <member name="F:Packet.systemIndex">
Server only - this is the index into the player array that this systemAddress maps to
</member>
        <member name="T:Packet">
This represents a user message from another system.
</member>
        <member name="T:RakNetGUID">
Uniquely identifies an instance of RakPeer. Use RakPeer::GetGuidFromSystemAddress() and RakPeer::GetSystemAddressFromGuid() to go between SystemAddress and RakNetGUID
Use RakPeer::GetGuidFromSystemAddress(UNASSIGNED_SYSTSEM_ADDRESS) to get your own GUID
</member>
        <member name="F:RPCParameters.replyToSender">
You can return values from RPC calls by writing them to this BitStream.
This is only sent back if the RPC call originally passed a BitStream to receive the reply.
If you do so and your send is reliable, it will block until you get a reply or you get disconnected from the system you are sending to, whichever is first.
If your send is not reliable, it will block for triple the ping time, or until you are disconnected, or you get a reply, whichever is first.
</member>
        <member name="F:RPCParameters.functionName">
The name of the function that was called.
</member>
        <member name="F:RPCParameters.recipient">
Which instance of RakPeer (or a derived RakPeer or RakPeer) got this call
</member>
        <member name="F:RPCParameters.sender">
Which system called this RPC
</member>
        <member name="F:RPCParameters.numberOfBitsOfData">
How many bits long \a input is
</member>
        <member name="F:RPCParameters.input">
The data from the remote system
</member>
        <member name="T:RPCParameters">
All RPC functions have the same parameter list - this structure.
\depreciated Use the AutoRPC or RPC3 plugin instead
</member>
        <member name="F:SystemAddress.port">
The port number
</member>
        <member name="F:SystemAddress.binaryAddress">
The peer address from inet_addr.
</member>
        <member name="T:SystemAddress">
\brief Network address for a system
Corresponds to a network address
This is not necessarily a unique identifier. For example, if a system has both LAN and internet connections, the system may be identified by either one, depending on who is communicating
Use RakNetGUID for a unique per-instance of RakPeer to identify systems
</member>
        <member name="F:SocketDescriptor.hostAddress">
The local network card address to bind to, such as "127.0.0.1".  Pass an empty string to use INADDR_ANY.
</member>
        <member name="F:SocketDescriptor.port">
The local port to bind to.  Pass 0 to have the OS autoassign a port.
</member>
        <member name="T:SocketDescriptor">
Describes the local socket to use for RakPeer::Startup
</member>
        <member name="D:MessageID">
First byte of a network message
</member>
        <member name="D:UniqueIDType">
Given a number of bits, return how many bytes are needed to represent that.
\sa NetworkIDObject.h
</member>
        <member name="D:uint8_t">
\file
\brief Types used by RakNet, most of which involve user code.

This file is part of RakNet Copyright 2003 Kevin Jenkins.

Usage of RakNet is subject to the appropriate license agreement.
Creative Commons Licensees are subject to the
license found at
http://creativecommons.org/licenses/by-nc/2.5/
Single application licensees are subject to the license found at
http://www.jenkinssoftware.com/SingleApplicationLicense.html
Custom license users are subject to the terms therein.
GPL license users are subject to the GNU General Public
License as published by the Free
Software Foundation; either version 2 of the License, or (at your
option) any later version.
Define __GET_TIME_64BIT to have RakNetTime use a 64, rather than 32 bit value.  A 32 bit value will overflow after about 5 weeks.
However, this doubles the bandwidth use for sending times, so don't do it unless you have a reason to.
Disabled by default.
Makes RakNet threadsafe
Define this if you use the same instance of RakPeer from multiple threads
Otherwise leave it undefined, since it makes things an order of magnitude slower.
Disabled by default
Define __BITSTREAM_NATIVE_END to NOT support endian swapping in the BitStream class.  This is faster and is what you should use
unless you actually plan to have different endianness systems connect to each other
Enabled by default.
Maximum (stack) size to use with _alloca before using new and delete instead.
Uncomment to use RakMemoryOverride for custom memory tracking
See RakMemoryOverride.h. 
If defined, RakNet will automatically try to determine available bandwidth and buffer accordingly (recommended)
If commented out, you will probably not be able to send large files and will get increased packetloss. However, responsiveness for the first 10 seconds or so will be improved.
If defined, OpenSSL is enabled for the class TCPInterface
This is necessary to use the SendEmail class with Google POP servers
Note that OpenSSL carries its own license restrictions that you should be aware of. If you don't agree, don't enable this define
This also requires that you enable header search paths to DependentExtensions\openssl-0.9.8g
#define OPEN_SSL_CLIENT_SUPPORT
Threshold at which to do a malloc / free rather than pushing data onto a fixed stack for the bitstream class
Arbitrary size, just picking something likely to be larger than most packets
</member>
        <member name="T:PacketReliability">
These enumerations are used to describe how packets are delivered.
\note  Note to self: I write this with 3 bits in the stream.  If I add more remember to change that
</member>
        <member name="F:NUMBER_OF_RELIABILITIES">
\internal
</member>
        <member name="F:RELIABLE_SEQUENCED">
This message is reliable and will arrive in the sequence you sent it.  Out or order messages will be dropped.  Same overhead as UNRELIABLE_SEQUENCED.
</member>
        <member name="F:RELIABLE_ORDERED">
This message is reliable and will arrive in the order you sent it.  Messages will be delayed while waiting for out of order messages.  Same overhead as UNRELIABLE_SEQUENCED.
</member>
        <member name="F:RELIABLE">
The message is sent reliably, but not necessarily in any order.  Same overhead as UNRELIABLE.
</member>
        <member name="F:UNRELIABLE_SEQUENCED">
Regular UDP with a sequence counter.  Out of order messages will be discarded.  This adds an additional 13 bits on top what is used for UNRELIABLE.
</member>
        <member name="F:UNRELIABLE">
Same as regular UDP, except that it will also discard duplicate datagrams.  RakNet adds (6 to 17) + 21 bits of overhead, 16 of which is used to detect duplicate packets and 6 to 17 of which is used for message length.
</member>
        <member name="T:PacketPriority">
\file
\brief An interface for RakPeer.  Simply contains all user functions as pure virtuals.

This file is part of RakNet Copyright 2003 Kevin Jenkins.

Usage of RakNet is subject to the appropriate license agreement.
Creative Commons Licensees are subject to the
license found at
http://creativecommons.org/licenses/by-nc/2.5/
Single application licensees are subject to the license found at
http://www.jenkinssoftware.com/SingleApplicationLicense.html
Custom license users are subject to the terms therein.
GPL license users are subject to the GNU General Public
License as published by the Free
Software Foundation; either version 2 of the License, or (at your
option) any later version.
\file
\brief This file contains enumerations for packet priority and reliability enumerations.

This file is part of RakNet Copyright 2003 Kevin Jenkins.

Usage of RakNet is subject to the appropriate license agreement.
Creative Commons Licensees are subject to the
license found at
http://creativecommons.org/licenses/by-nc/2.5/
Single application licensees are subject to the license found at
http://www.jenkinssoftware.com/SingleApplicationLicense.html
Custom license users are subject to the terms therein.
GPL license users are subject to the GNU General Public
License as published by the Free
Software Foundation; either version 2 of the License, or (at your
option) any later version.
These enumerations are used to describe when packets are delivered.
</member>
        <member name="F:NUMBER_OF_PRIORITIES">
\internal
</member>
        <member name="F:LOW_PRIORITY">
Low priority messages are only sent when no other messages are waiting.
</member>
        <member name="F:MEDIUM_PRIORITY">
Medium priority messages are send before low priority messages.
</member>
        <member name="F:HIGH_PRIORITY">
High priority messages are send before medium priority messages.
</member>
        <member name="F:SYSTEM_PRIORITY">
\internal Used by RakNet to send above-high priority messages.
</member>
        <member name="T:RakPeerInterface">
\file
\brief Factory class for RakNet objects

This file is part of RakNet Copyright 2003 Kevin Jenkins.

Usage of RakNet is subject to the appropriate license agreement.
Creative Commons Licensees are subject to the
license found at
http://creativecommons.org/licenses/by-nc/2.5/
Single application licensees are subject to the license found at
http://www.jenkinssoftware.com/SingleApplicationLicense.html
Custom license users are subject to the terms therein.
GPL license users are subject to the GNU General Public
License as published by the Free
Software Foundation; either version 2 of the License, or (at your
option) any later version.

Size of SystemAddress data

The primary interface for RakNet, RakPeer contains all major functions for the library.
See the individual functions for what the class can do.
\brief The main interface for network communications
</member>
        <member name="T:DefaultMessageIDTypes">
\file
\brief All the message identifiers used by RakNet.  Message identifiers comprise the first byte of any message.

This file is part of RakNet Copyright 2003 Kevin Jenkins.

Usage of RakNet is subject to the appropriate license agreement.
Creative Commons Licensees are subject to the
license found at
http://creativecommons.org/licenses/by-nc/2.5/
Single application licensees are subject to the license found at
http://www.jenkinssoftware.com/SingleApplicationLicense.html
Custom license users are subject to the terms therein.
GPL license users are subject to the GNU General Public
License as published by the Free
Software Foundation; either version 2 of the License, or (at your
option) any later version.
You should not edit the file MessageIdentifiers.h as it is a part of RakNet static library
To define your own message id, define an enum following the code example that follows. 

\code
enum {
  ID_MYPROJECT_MSG_1 = ID_USER_PACKET_ENUM,
  ID_MYPROJECT_MSG_2, 
   ... 
};
\endcode 

\note All these enumerations should be casted to (unsigned char) before writing them to RakNet::BitStream
</member>
        <member name="F:ID_READY_EVENT_FORCE_ALL_SET">
Force the ready event to all set
</member>
        <member name="F:ID_FILE_LIST_REFERENCE_PUSH">
FileListTransfer transferring large files in chunks that are read only when needed, to save memory
</member>
        <member name="F:ID_RPC_REMOTE_ERROR">
Auto RPC error code
See AutoRPC.h for codes, stored in packet-&gt;data[1]
</member>
        <member name="F:ID_AUTO_RPC_UNKNOWN_REMOTE_INDEX">
Auto RPC functionName to index mapping, lookup failed. Will try to auto recover
</member>
        <member name="F:ID_AUTO_RPC_REMOTE_INDEX">
Auto RPC functionName to index mapping
</member>
        <member name="F:ID_AUTO_RPC_CALL">
Auto RPC procedure call
</member>
        <member name="F:ID_LOBBY_GENERAL">
Lobby packets. Second byte indicates type.
</member>
        <member name="F:ID_READY_EVENT_QUERY">
ReadyEvent plugin - Request of ready event state - used for pulling data when newly connecting
</member>
        <member name="F:ID_READY_EVENT_ALL_SET">
All systems are in state ID_READY_EVENT_SET
</member>
        <member name="F:ID_READY_EVENT_UNSET">
ReadyEvent plugin - Unset the ready state for a particular system
</member>
        <member name="F:ID_READY_EVENT_SET">
ReadyEvent plugin - Set the ready state for a particular system
</member>
        <member name="F:ID_DATABASE_INCORRECT_PASSWORD">
LightweightDatabase plugin - Incorrect password
</member>
        <member name="F:ID_DATABASE_UNKNOWN_TABLE">
LightweightDatabase plugin - Specified table not found
</member>
        <member name="F:ID_DATABASE_QUERY_REPLY">
LightweightDatabase plugin - A serialized table.  Bytes 1+ contain the table.  Pass to TableSerializer::DeserializeTable
</member>
        <member name="F:ID_DATABASE_REMOVE_ROW">
LightweightDatabase plugin - Remove
</member>
        <member name="F:ID_DATABASE_UPDATE_ROW">
LightweightDatabase plugin - Update
</member>
        <member name="F:ID_DATABASE_QUERY_REQUEST">
LightweightDatabase plugin - Query
</member>
        <member name="F:ID_NAT_IN_PROGRESS">
NATPunchthrough plugin - The facilitator is already attempting this connection
</member>
        <member name="F:ID_NAT_SEND_OFFLINE_MESSAGE_AT_TIME">
NATPunchthrough plugin - Internal message to send a message (to punch through the nat) at a certain time
</member>
        <member name="F:ID_NAT_CONNECT_AT_TIME">
NATPunchthrough plugin - Internal message to connect at a certain time
</member>
        <member name="F:ID_NAT_TARGET_CONNECTION_LOST">
NATPunchthrough plugin - While attempting to connect, we lost the connection to the target system
</member>
        <member name="F:ID_NAT_TARGET_NOT_CONNECTED">
NATPunchthrough plugin - Intermediary cannot complete the request because the target system is not connected
</member>
        <member name="F:ID_NAT_PUNCHTHROUGH_REQUEST">
NATPunchthrough plugin - Intermediary got a request to help punch through a nat
</member>
        <member name="F:ID_AUTOPATCHER_RESTART_APPLICATION">
Autopatcher plugin - Returned to the user: You must restart the application to finish patching.
</member>
        <member name="F:ID_AUTOPATCHER_FINISHED_INTERNAL">
Autopatcher plugin - Finished getting all files from the autopatcher
</member>
        <member name="F:ID_AUTOPATCHER_REPOSITORY_FATAL_ERROR">
Autopatcher plugin - Returned to the user: An error from the database repository for the autopatcher.
</member>
        <member name="F:ID_AUTOPATCHER_PATCH_LIST">
Autopatcher plugin - A list of patches for a list of files
</member>
        <member name="F:ID_AUTOPATCHER_GET_PATCH">
Autopatcher plugin - A list of files to get patches for
</member>
        <member name="F:ID_AUTOPATCHER_DELETION_LIST">
Autopatcher plugin - A list of files to delete
</member>
        <member name="F:ID_AUTOPATCHER_CREATION_LIST">
Autopatcher plugin - A list of files to create
</member>
        <member name="F:ID_AUTOPATCHER_GET_CHANGELIST_SINCE_DATE">
Autopatcher plugin - Get a list of files that have changed since a certain date
</member>
        <member name="F:ID_RAKVOICE_DATA">
RakVoice plugin - Voice data
</member>
        <member name="F:ID_RAKVOICE_CLOSE_CHANNEL">
RakVoice plugin - Close a communication channel
</member>
        <member name="F:ID_RAKVOICE_OPEN_CHANNEL_REPLY">
RakVoice plugin - Communication channel accepted
</member>
        <member name="F:ID_RAKVOICE_OPEN_CHANNEL_REQUEST">
RakVoice plugin - Open a communication channel
</member>
        <member name="F:ID_ROUTE_AND_MULTICAST">
Router plugin - route a message through another system
</member>
        <member name="F:ID_CONNECTION_GRAPH_DISCONNECTION_NOTIFICATION">
ConnectionGraph plugin - Remove a connection from a connection graph - connection was gracefully lost
</member>
        <member name="F:ID_CONNECTION_GRAPH_CONNECTION_LOST">
ConnectionGraph plugin - Remove a connection from a connection graph - connection was abruptly lost
</member>
        <member name="F:ID_CONNECTION_GRAPH_NEW_CONNECTION">
ConnectionGraph plugin - Add a new connection to a connection graph
</member>
        <member name="F:ID_CONNECTION_GRAPH_UPDATE">
ConnectionGraph plugin - Update edges / nodes for a system with a connection graph
</member>
        <member name="F:ID_CONNECTION_GRAPH_REPLY">
ConnectionGraph plugin - Reply to a connection graph download request
</member>
        <member name="F:ID_CONNECTION_GRAPH_REQUEST">
ConnectionGraph plugin - Request the connection graph from another system
</member>
        <member name="F:ID_REPLICA_MANAGER_DOWNLOAD_COMPLETE">
ReplicaManager plugin - Finished downloading all serialized objects
</member>
        <member name="F:ID_REPLICA_MANAGER_DOWNLOAD_STARTED">
ReplicaManager plugin - New connection, about to send all world objects
</member>
        <member name="F:ID_REPLICA_MANAGER_SERIALIZE">
ReplicaManager plugin - Serialized data of an object
</member>
        <member name="F:ID_REPLICA_MANAGER_SCOPE_CHANGE">
ReplicaManager plugin - Changed scope of an object
</member>
        <member name="F:ID_REPLICA_MANAGER_DESTRUCTION">
ReplicaManager plugin - Destroy an object
</member>
        <member name="F:ID_REPLICA_MANAGER_CONSTRUCTION">
ReplicaManager plugin - Create an object
</member>
        <member name="F:ID_TRANSPORT_STRING">
RakNetTransport plugin - Transport provider message, used for remote console
</member>
        <member name="F:ID_DDT_DOWNLOAD_REQUEST">
DirectoryDeltaTransfer plugin - Request from a remote system for a download of a directory
</member>
        <member name="F:ID_FILE_LIST_TRANSFER_FILE">
FileListTransfer plugin - A file
</member>
        <member name="F:ID_FILE_LIST_TRANSFER_HEADER">
FileListTransfer plugin - Setup data
</member>
        <member name="F:ID_REMOTE_NEW_INCOMING_CONNECTION">
ConnectionGraph plugin - In a client/server environment, a client other than ourselves has connected.  Packet::systemAddress is modified to reflect the systemAddress of the client that is not connected directly to us. The packet encoding is SystemAddress 1, ConnectionGraphGroupID 1, SystemAddress 2, ConnectionGraphGroupID 2
</member>
        <member name="F:ID_REMOTE_CONNECTION_LOST">
ConnectionGraph plugin - In a client/server environment, a client other than ourselves has been forcefully dropped. Packet::systemAddress is modified to reflect the systemAddress of this client.
</member>
        <member name="F:ID_REMOTE_DISCONNECTION_NOTIFICATION">
ConnectionGraph plugin - In a client/server environment, a client other than ourselves has disconnected gracefully.  Packet::systemAddress is modified to reflect the systemAddress of this client.
</member>
        <member name="F:ID_ADVERTISE_SYSTEM">
RakPeer - Inform a remote system of our IP/Port, plus some offline data
</member>
        <member name="F:ID_PONG">
RakPeer - Pong from an unconnected system.  First byte is ID_PONG, second sizeof(RakNetTime) bytes is the ping, following bytes is system specific enumeration data.
</member>
        <member name="F:ID_TIMESTAMP">
RakPeer - The four bytes following this byte represent an unsigned int which is automatically modified by the difference in system times between the sender and the recipient. Requires that you call SetOccasionalPing.
</member>
        <member name="F:ID_MODIFIED_PACKET">
RakPeer - A packet has been tampered with in transit.  The sender is contained in Packet::systemAddress.
</member>
        <member name="F:ID_INVALID_PASSWORD">
RakPeer - The remote system is using a password and has refused our connection because we did not set the correct password.
</member>
        <member name="F:ID_CONNECTION_BANNED">
RakPeer - We are banned from the system we attempted to connect to.
</member>
        <member name="F:ID_RSA_PUBLIC_KEY_MISMATCH">
RakPeer - We preset an RSA public key which does not match what the system we connected to is using.
</member>
        <member name="F:ID_CONNECTION_LOST">
RakPeer - Reliable packets cannot be delivered to the system specified in Packet::systemAddress.  The connection to that system has been closed. 
</member>
        <member name="F:ID_DISCONNECTION_NOTIFICATION">
RakPeer - The system specified in Packet::systemAddress has disconnected from us.  For the client, this would mean the server has shutdown. 
</member>
        <member name="F:ID_NO_FREE_INCOMING_CONNECTIONS">
RakPeer - The system we attempted to connect to is not accepting new connections.
</member>
        <member name="F:ID_NEW_INCOMING_CONNECTION">
RakPeer - A remote system has successfully connected.
</member>
        <member name="F:ID_ALREADY_CONNECTED">
RakPeer - Sent a connect request to a system we are currently connected to.
</member>
        <member name="F:ID_CONNECTION_ATTEMPT_FAILED">
RakPeer - Sent to the player when a connection request cannot be completed due to inability to connect. 
</member>
        <member name="F:ID_CONNECTION_REQUEST_ACCEPTED">
RakPeer - In a client/server environment, our connection request to the server has been accepted.
</member>
        <member name="F:ID_OUT_OF_BAND_INTERNAL">
RakPeer - Same as ID_ADVERTISE_SYSTEM, but intended for internal use rather than being passed to the user. Second byte indicates type. Used currently for NAT punchthrough for receiver port advertisement. See ID_NAT_ADVERTISE_RECIPIENT_PORT
</member>
        <member name="F:ID_RPC_REPLY">
Remote procedure call reply, for RPCs that return data (internal use only)
</member>
        <member name="F:ID_RPC">
Remote procedure call (internal use only)
</member>
        <member name="F:ID_OPEN_CONNECTION_REPLY">
Offline message response so we know when to reset and start a new connection (internal use only)
</member>
        <member name="F:ID_OPEN_CONNECTION_REQUEST">
Offline message so we know when to reset and start a new connection (internal use only)
</member>
        <member name="F:ID_DETECT_LOST_CONNECTIONS">
A reliable packet to detect lost connections (internal use only)
</member>
        <member name="F:ID_RPC_MAPPING">
Packet that tells us the packet contains an integer ID to name mapping for the remote system (internal use only)
</member>
        <member name="F:ID_SECURED_CONNECTION_CONFIRMATION">
Connecting to a secured server/peer (internal use only)
</member>
        <member name="F:ID_SECURED_CONNECTION_RESPONSE">
Connecting to a secured server/peer (internal use only)
</member>
        <member name="F:ID_CONNECTION_REQUEST">
Asking for a new connection (internal use only)
</member>
        <member name="F:ID_CONNECTED_PONG">
Pong from a connected system.  Update timestamps (internal use only)
</member>
        <member name="F:ID_PING_OPEN_CONNECTIONS">
Ping from an unconnected system.  Only reply if we have open connections. Do not update timestamps. (internal use only)
</member>
        <member name="F:ID_PING">
Ping from an unconnected system.  Reply but do not update timestamps. (internal use only)
</member>
        <member name="F:ID_INTERNAL_PING">
These types are never returned to the user.
Ping from a connected system.  Update timestamps (internal use only)
</member>
        <member name="M:Console_DropFirstMessage(System.Boolean)">
 Drop the latest log on the list to clear room
 @author adelphospro
 @param [bool]ConsoleReset = [default] false - If true, function will reset console tracking index. 
											Useful if you drop first message but do not add a new one
 @date 11.14.2009

</member>
        <member name="M:Console_PrintLog(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
Print text to the log. This is the best place to store debug messages.
Note there is no time expire on these.
@author adelphospro
@date 11.14.2009

</member>
        <member name="M:Console_ClearLog">
Clear all logs
@author adelphospro
@date 11.14.2009

</member>
        <member name="M:Console_ToggleCheat(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Provides us with a central place to enable cheats.
This allows us to easily disable any commands
considered a cheat for multiplayer games abd such
@author adelphospro
@date 11.14.2009

</member>
        <member name="M:Console_TypedTextParseCheck(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
Parse text using string compare and return true if comand is the requested command
@author adelphospro
@date 11.15.2009

</member>
        <member name="D:irr.f64">
This is a typedef for double, it ensures portability of the engine. 
</member>
        <member name="D:irr.f32">
This is a typedef for float, it ensures portability of the engine. 
</member>
        <member name="D:irr.s32">
This is a typedef for signed int, it ensures portability of the engine. 
</member>
        <member name="D:irr.u32">
This is a typedef for unsigned int, it ensures portability of the engine. 
</member>
        <member name="D:irr.s16">
This is a typedef for signed short, it ensures portability of the engine. 
</member>
        <member name="D:irr.u16">
This is a typedef for unsigned short, it ensures portability of the engine. 
</member>
        <member name="D:irr.c8">
This is a typedef for char, it ensures portability of the engine. 
</member>
        <member name="D:irr.s8">
This is a typedef for signed char, it ensures portability of the engine. 
</member>
        <member name="D:irr.u8">
This is a typedef for unsigned char, it ensures portability of the engine. 
</member>
        <member name="M:irr.io.createIrrXMLReaderUTF32(irr.io.IFileReadCallBack*)">
This means that
	all character data will be returned in UTF-32. The file to read can 
	be in any format, it will be converted to UTF-32 if it is not in this format.
	If you are using the Irrlicht Engine, it is better not to use this function but
	IFileSystem::createXMLReader() instead.
	\param callback: Callback for file read abstraction. Implement your own
	callback to make the xml parser read in other things than just files. See
	IFileReadCallBack for more information about this.
	\return Returns a pointer to the created xml parser. This pointer should be 
	deleted using 'delete' after no longer needed. Returns 0 if an error occured
	and the file could not be opened. 
</member>
        <member name="M:irr.io.createIrrXMLReaderUTF32(_iobuf*)">
This means that all character data will be returned in UTF-32. The file to read can 
	be in any format, it will be converted to UTF-32 if it is not in this format.
	if you are using the Irrlicht Engine, it is better not to use this function but
	IFileSystem::createXMLReader() instead.
	\param file: Pointer to opened file, must have been opened in binary mode, e.g.
	using fopen("foo.bar", "wb"); The file will not be closed after it has been read.
	\return Returns a pointer to the created xml parser. This pointer should be 
	deleted using 'delete' after no longer needed. Returns 0 if an error occured
	and the file could not be opened. 
</member>
        <member name="M:irr.io.createIrrXMLReaderUTF32(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
This means that all character data will be returned in UTF-32. The file to read can 
	be in any format, it will be converted to UTF-32 if it is not in this format.
	If you are using the Irrlicht Engine, it is better not to use this function but
	IFileSystem::createXMLReader() instead.
	\param filename: Name of file to be opened.
	\return Returns a pointer to the created xml parser. This pointer should be 
	deleted using 'delete' after no longer needed. Returns 0 if an error occured
	and the file could not be opened. 
</member>
        <member name="M:irr.io.createIrrXMLReaderUTF16(irr.io.IFileReadCallBack*)">
This means that all character data will be returned in UTF-16. The file to read can 
	be in any format, it will be converted to UTF-16 if it is not in this format.
	If you are using the Irrlicht Engine, it is better not to use this function but
	IFileSystem::createXMLReader() instead.
	\param callback: Callback for file read abstraction. Implement your own
	callback to make the xml parser read in other things than just files. See
	IFileReadCallBack for more information about this.
	\return Returns a pointer to the created xml parser. This pointer should be 
	deleted using 'delete' after no longer needed. Returns 0 if an error occured
	and the file could not be opened. 
</member>
        <member name="M:irr.io.createIrrXMLReaderUTF16(_iobuf*)">
This means that all character data will be returned in UTF-16. The file to read can 
	be in any format, it will be converted to UTF-16 if it is not in this format.
	If you are using the Irrlicht Engine, it is better not to use this function but
	IFileSystem::createXMLReader() instead.
	\param file: Pointer to opened file, must have been opened in binary mode, e.g.
	using fopen("foo.bar", "wb"); The file will not be closed after it has been read.
	\return Returns a pointer to the created xml parser. This pointer should be 
	deleted using 'delete' after no longer needed. Returns 0 if an error occured
	and the file could not be opened. 
</member>
        <member name="M:irr.io.createIrrXMLReaderUTF16(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
This means that
	all character data will be returned in UTF-16. The file to read can 
	be in any format, it will be converted to UTF-16 if it is not in this format.
	If you are using the Irrlicht Engine, it is better not to use this function but
	IFileSystem::createXMLReader() instead.
	\param filename: Name of file to be opened.
	\return Returns a pointer to the created xml parser. This pointer should be 
	deleted using 'delete' after no longer needed. Returns 0 if an error occured
	and the file could not be opened. 
</member>
        <member name="M:irr.io.createIrrXMLReader(irr.io.IFileReadCallBack*)">
This means that all character data will be returned in 8 bit ASCII or UTF-8. The file to read can 
	 be in any format, it will be converted to UTF-8 if it is not in this format.
	 If you are using the Irrlicht Engine, it is better not to use this function but
	 IFileSystem::createXMLReaderUTF8() instead.
	 \param callback: Callback for file read abstraction. Implement your own
	 callback to make the xml parser read in other things than just files. See
	 IFileReadCallBack for more information about this.
	 \return Returns a pointer to the created xml parser. This pointer should be 
	 deleted using 'delete' after no longer needed. Returns 0 if an error occured
	 and the file could not be opened. 
</member>
        <member name="M:irr.io.createIrrXMLReader(_iobuf*)">
This means that all character data will be returned in 8 bit ASCII or UTF-8. The file to read can 
	be in any format, it will be converted to UTF-8 if it is not in this format.
	If you are using the Irrlicht Engine, it is better not to use this function but
	IFileSystem::createXMLReaderUTF8() instead.
	\param file: Pointer to opened file, must have been opened in binary mode, e.g.
	using fopen("foo.bar", "wb"); The file will not be closed after it has been read.
	\return Returns a pointer to the created xml parser. This pointer should be 
	deleted using 'delete' after no longer needed. Returns 0 if an error occured
	and the file could not be opened. 
</member>
        <member name="M:irr.io.createIrrXMLReader(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
This means that all character data will be returned in 8 bit ASCII or UTF-8. 
	The file to read can be in any format, it will be converted to UTF-8 if it is not in this format.
	If you are using the Irrlicht Engine, it is better not to use this function but
	IFileSystem::createXMLReaderUTF8() instead.
	\param filename: Name of file to be opened.
	\return Returns a pointer to the created xml parser. This pointer should be 
	deleted using 'delete' after no longer needed. Returns 0 if an error occured
	and the file could not be opened. 
</member>
        <member name="D:irr.io.IrrXMLReaderUTF32">
This means that all character data will be returned in UTF-32 by this parser. 
	The file to read can be in any format, it will be converted to UTF-32 if it is not
	in this format.
	Create an instance of this with createIrrXMLReaderUTF32(); 
	See IIrrXMLReader for description on how to use it. 
</member>
        <member name="D:irr.io.IrrXMLReaderUTF16">
This means that all character data will be returned in UTF-16 by this parser. 
	The file to read can be in any format, it will be converted to UTF-16 if it is not
	in this format.
	Create an instance of this with createIrrXMLReaderUTF16(); 
	See IIrrXMLReader for description on how to use it.  
</member>
        <member name="D:irr.io.IrrXMLReader">
This means that all character data will be returned in 8 bit ASCII or UTF-8 by this parser. 
	The file to read can be in any format, it will be converted to UTF-8 if it is not
	in this format.
	Create an instance of this with createIrrXMLReader(); 
	See IIrrXMLReader for description on how to use it. 
</member>
        <member name="D:irr.io.char32">
Not using wchar_t for this because 
	wchar_t has 16 bit on windows and 32 bit on other operating systems. 
</member>
        <member name="D:irr.io.char16">
Not using wchar_t for this because 
	wchar_t has 16 bit on windows and 32 bit on other operating systems. 
</member>
        <member name="M:irr.io.IFileReadCallBack.read(System.Void*,System.Int32)">
\param buffer: Pointer to buffer where to read bytes will be written to.
		\param sizeToRead: Amount of bytes to read from the file.
		\return Returns how much bytes were read. 
</member>
        <member name="T:irr.io.IFileReadCallBack">
With this, it is possible to make the xml parser read in other things 
	than just files. The Irrlicht engine is using this for example to 
	read xml from compressed .zip files. To make the parser read in 
	any other data, derive a class from this interface, implement the 
	two methods to read your data and give a pointer to an instance of
	your implementation when calling createIrrXMLReader(), 
	createIrrXMLReaderUTF16() or createIrrXMLReaderUTF32() 
</member>
        <member name="M:TVehicle.process_slide">
Process gravity in vehicle

</member>
        <member name="M:TVehicle.process(_TCharacter*)">
Process jeep movement and animation
@type Static function
@author adelphospro
@date 9.19.2009

</member>
        <member name="M:TVehicle.Dispose">
Vehicle destructor

</member>
        <member name="M:TVehicle.#ctor">
Vehicle constructor

</member>
        <!-- Discarding badly formed XML document comment for member 'T:irr.io.IXMLBase'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RakPeerInterface.GetMaximumIncomingConnections'. -->
        <!-- Discarding badly formed XML document comment for member 'M:RakPeerInterface.SendList(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**,System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst,PacketPriority,PacketReliability,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,SystemAddress,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:irr.io.IXMLBase'. -->
    </members>
</doc>